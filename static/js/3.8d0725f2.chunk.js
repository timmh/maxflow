(this.webpackJsonpmaxflow=this.webpackJsonpmaxflow||[]).push([[3],{100:function(e,n,t){"use strict";function r(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}t.d(n,"a",(function(){return r}))},96:function(e,n,t){"use strict";t.r(n);var r=t(11),a=t.n(r),i=t(99),o=t(100),l=t(40);function $(){var e=Object(o.a)(["\n    \begin{algorithm}\n    \begin{algorithmic}\n    PROCEDURE{Edmonds-Karp}{$G=(V, E), "," in V, "," in V$}\n        STATE $f = 0$\n        REPEAT\n            STATE $p = left[ \right]$\n            STATE $q = left[ "," \right]$ COMMENT{create queue}\n            WHILE{$q_mathrm{length}$ > 0}\n                STATE $c =$ CALL{dequeue}{$q$}\n                FOR{edge $e$ originating from $c$}\n                    IF{$e_mathrm{target} \notin p$ AND $e_mathrm{target} \neq ","$ AND $e_mathrm{capacity} > e_mathrm{flow}$}\n                        STATE $p[e_mathrm{target}] = e$\n                        STATE CALL{enqueue}{$q$, $e_mathrm{target}$}\n                    ENDIF\n                ENDFOR\n            ENDWHILE\n            IF{$p[","] \neq \varnothing$}\n                STATE $Delta f = infty$\n                FOR{$e in p$}\n                    STATE $Delta f = $ CALL{min}{$Delta f$, $e_mathrm{capacity} - e_mathrm{flow}$}\n                ENDFOR\n                FOR{$e in p$}\n                    STATE $r = e_mathrm{reverse}$\n                    STATE $e_mathrm{flow} = e_mathrm{flow} + Delta f$\n                    STATE $r_mathrm{flow} = r_mathrm{flow} - Delta f$\n                ENDFOR\n                STATE $f = f + Delta f$\n            ENDIF\n        UNTIL{$p[","] = \varnothing$}\n        RETURN $f$\n    ENDPROCEDURE\n    end{algorithmic}\n    end{algorithm}\n  "],["\n    \\begin{algorithm}\n    \\begin{algorithmic}\n    \\PROCEDURE{Edmonds-Karp}{$G=(V,\\ E),\\ "," \\in V,\\ "," \\in V$}\n        \\STATE $f = 0$\n        \\REPEAT\n            \\STATE $p = \\left[\\ \\right]$\n            \\STATE $q = \\left[\\ ","\\ \\right]$ \\COMMENT{create queue}\n            \\WHILE{$q_\\mathrm{length}$ > 0}\n                \\STATE $c =$ \\CALL{dequeue}{$q$}\n                \\FOR{edge $e$ originating from $c$}\n                    \\IF{$e_\\mathrm{target} \\notin p$ \\AND $e_\\mathrm{target} \\neq ","$ \\AND $e_\\mathrm{capacity} > e_\\mathrm{flow}$}\n                        \\STATE $p[e_\\mathrm{target}] = e$\n                        \\STATE \\CALL{enqueue}{$q$, $e_\\mathrm{target}$}\n                    \\ENDIF\n                \\ENDFOR\n            \\ENDWHILE\n            \\IF{$p[","] \\neq \\varnothing$}\n                \\STATE $\\Delta f = \\infty$\n                \\FOR{$e \\in p$}\n                    \\STATE $\\Delta f = $ \\CALL{min}{$\\Delta f$, $e_\\mathrm{capacity} - e_\\mathrm{flow}$}\n                \\ENDFOR\n                \\FOR{$e \\in p$}\n                    \\STATE $r = e_\\mathrm{reverse}$\n                    \\STATE $e_\\mathrm{flow} = e_\\mathrm{flow} + \\Delta f$\n                    \\STATE $r_\\mathrm{flow} = r_\\mathrm{flow} - \\Delta f$\n                \\ENDFOR\n                \\STATE $f = f + \\Delta f$\n            \\ENDIF\n        \\UNTIL{$p[","] = \\varnothing$}\n        \\RETURN $f$\n    \\ENDPROCEDURE\n    \\end{algorithmic}\n    \\end{algorithm}\n  "]);return $=function(){return e},e}var c={name:"Edmonds-Karp",linearDataStructure:"queue",pseudocode:function(e){var n=e.sourceName,t=e.sinkName;return String.raw($(),n,t,n,n,t,t)},references:[{label:"Edmonds-Karp Algorithm at Brilliant.org",url:"https://brilliant.org/wiki/edmonds-karp-algorithm/"},{label:"Jack Edmonds, Richard M. Karp: Theoretical improvements in algorithmic efficiency for network flow problems (1972)",url:"https://web.eecs.umich.edu/~pettie/matching/Edmonds-Karp-network-flow.pdf"}],labeledBlocks:[{lines:[4,14],color:"#ffdcdc",label:"Breadth-first search"},{lines:[15,26],color:"#e3ffff",label:"Increase flow along found path"}],implementation:a.a.mark((function e(n){var t,r,o,$,c,g,h,f,s,u,m,d,E,T,p,N;return a.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=n.getSourceNode(),r=n.getSinkNode(),o=0;case 3:return c=[t],$={},g=[],e.next=8,{highlightedLines:[4,5],linearNodes:c};case 8:if(!(c.length>0)||$[r.getId()]){e.next=36;break}return h=c.shift(),g.push(new l.g(h).inverse()),e.next=13,{highlightedLines:[7],linearNodes:c,graphMutations:[new l.g(h)]};case 13:f=Object(i.a)(h.getOutgoingEdges()),e.prev=14,f.s();case 16:if((s=f.n()).done){e.next=26;break}return u=s.value,void 0===$[u.getTargetNode().getId()]&&!u.getTargetNode().isEqualTo(t)&&u.getCapacity()>u.getFlow()&&($[u.getTargetNode().getId()]=u,c.push(u.getTargetNode())),g.push(new l.d(u).inverse()),e.next=22,{highlightedLines:[10,11],linearNodes:c,graphMutations:[new l.d(u)]};case 22:if(!u.getTargetNode().isEqualTo(r)){e.next=24;break}return e.abrupt("break",26);case 24:e.next=16;break;case 26:e.next=31;break;case 28:e.prev=28,e.t0=e.catch(14),f.e(e.t0);case 31:return e.prev=31,f.f(),e.finish(31);case 34:e.next=8;break;case 36:if(void 0===$[r.getId()]){e.next=57;break}for(m=$[r.getId()],d=[];m;)d.push(new l.d(m),new l.g(m.getSourceNode()),new l.g(m.getTargetNode())),m=$[m.getSourceNode().getId()];return E=d.slice().reverse().map((function(e){return e.inverse()})),e.next=43,{highlightedLines:[16],linearNodes:c,graphMutations:[].concat(g,d)};case 43:for(T=1/0,p=$[r.getId()];void 0!==p;)T=Math.min(T,p.getCapacity()-p.getFlow()),p=$[p.getSourceNode().getId()];p=$[r.getId()];case 47:if(void 0===p){e.next=54;break}return N=p.getReverseEdge(),e.next=51,{highlightedLines:[22,23],linearNodes:c,graphMutations:[new l.c(p,T),new l.c(N,-T)]};case 51:p=$[p.getSourceNode().getId()],e.next=47;break;case 54:return o+=T,e.next=57,{highlightedLines:[25],linearNodes:c,graphMutations:E};case 57:if(void 0!==$[r.getId()]){e.next=3;break}case 58:return e.next=60,{highlightedLines:[28],linearNodes:[],done:!0};case 60:return e.abrupt("return",o);case 61:case"end":return e.stop()}}),e,null,[[14,28,31,34]])}))};n.default=c},99:function(e,n,t){"use strict";t.d(n,"a",(function(){return a}));var r=t(23);function a(e){if("undefined"===typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=Object(r.a)(e))){var n=0,t=function(){};return{s:t,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:t}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i,o=!0,l=!1;return{s:function(){a=e[Symbol.iterator]()},n:function(){var e=a.next();return o=e.done,e},e:function(e){l=!0,i=e},f:function(){try{o||null==a.return||a.return()}finally{if(l)throw i}}}}}}]);
//# sourceMappingURL=3.8d0725f2.chunk.js.map