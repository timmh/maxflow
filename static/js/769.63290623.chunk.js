"use strict";(self.webpackChunkmaxflow=self.webpackChunkmaxflow||[]).push([[769],{8769:function(e,n,t){t.r(n);var r,a=t(7762),i=t(168),o=t(7757),l=t.n(o),h=t(6357),g={name:"Edmonds-Karp",linearDataStructure:"queue",pseudocode:function(e){var n=e.sourceName,t=e.sinkName;return String.raw(r||(r=(0,i.Z)(["\n    \begin{algorithm}\n    \begin{algorithmic}\n    PROCEDURE{Edmonds-Karp}{$G=(V, E), "," in V, "," in V$}\n        STATE $f = 0$\n        REPEAT\n            STATE $p = left[ \right]$\n            STATE $q = left[ "," \right]$ COMMENT{create queue}\n            WHILE{$q_mathrm{length}$ > 0}\n                STATE $c =$ CALL{dequeue}{$q$}\n                FOR{edge $e$ originating from $c$}\n                    IF{$e_mathrm{target} \notin p$ AND $e_mathrm{target} \neq ","$ AND $e_mathrm{capacity} > e_mathrm{flow}$}\n                        STATE $p[e_mathrm{target}] = e$\n                        STATE CALL{enqueue}{$q$, $e_mathrm{target}$}\n                    ENDIF\n                ENDFOR\n            ENDWHILE\n            IF{$p[","] \neq \varnothing$}\n                STATE $Delta f = infty$\n                FOR{$e in p$}\n                    STATE $Delta f = $ CALL{min}{$Delta f$, $e_mathrm{capacity} - e_mathrm{flow}$}\n                ENDFOR\n                FOR{$e in p$}\n                    STATE $r = e_mathrm{reverse}$\n                    STATE $e_mathrm{flow} = e_mathrm{flow} + Delta f$\n                    STATE $r_mathrm{flow} = r_mathrm{flow} - Delta f$\n                ENDFOR\n                STATE $f = f + Delta f$\n            ENDIF\n        UNTIL{$p[","] = \varnothing$}\n        RETURN $f$\n    ENDPROCEDURE\n    end{algorithmic}\n    end{algorithm}\n  "],["\n    \\begin{algorithm}\n    \\begin{algorithmic}\n    \\PROCEDURE{Edmonds-Karp}{$G=(V,\\ E),\\ "," \\in V,\\ "," \\in V$}\n        \\STATE $f = 0$\n        \\REPEAT\n            \\STATE $p = \\left[\\ \\right]$\n            \\STATE $q = \\left[\\ ","\\ \\right]$ \\COMMENT{create queue}\n            \\WHILE{$q_\\mathrm{length}$ > 0}\n                \\STATE $c =$ \\CALL{dequeue}{$q$}\n                \\FOR{edge $e$ originating from $c$}\n                    \\IF{$e_\\mathrm{target} \\notin p$ \\AND $e_\\mathrm{target} \\neq ","$ \\AND $e_\\mathrm{capacity} > e_\\mathrm{flow}$}\n                        \\STATE $p[e_\\mathrm{target}] = e$\n                        \\STATE \\CALL{enqueue}{$q$, $e_\\mathrm{target}$}\n                    \\ENDIF\n                \\ENDFOR\n            \\ENDWHILE\n            \\IF{$p[","] \\neq \\varnothing$}\n                \\STATE $\\Delta f = \\infty$\n                \\FOR{$e \\in p$}\n                    \\STATE $\\Delta f = $ \\CALL{min}{$\\Delta f$, $e_\\mathrm{capacity} - e_\\mathrm{flow}$}\n                \\ENDFOR\n                \\FOR{$e \\in p$}\n                    \\STATE $r = e_\\mathrm{reverse}$\n                    \\STATE $e_\\mathrm{flow} = e_\\mathrm{flow} + \\Delta f$\n                    \\STATE $r_\\mathrm{flow} = r_\\mathrm{flow} - \\Delta f$\n                \\ENDFOR\n                \\STATE $f = f + \\Delta f$\n            \\ENDIF\n        \\UNTIL{$p[","] = \\varnothing$}\n        \\RETURN $f$\n    \\ENDPROCEDURE\n    \\end{algorithmic}\n    \\end{algorithm}\n  "])),n,t,n,n,t,t)},references:[{label:"Edmonds-Karp Algorithm at Brilliant.org",url:"https://brilliant.org/wiki/edmonds-karp-algorithm/"},{label:"Jack Edmonds, Richard M. Karp: Theoretical improvements in algorithmic efficiency for network flow problems (1972)",url:"https://web.eecs.umich.edu/~pettie/matching/Edmonds-Karp-network-flow.pdf"}],labeledBlocks:[{lines:[4,14],color:"#ffdcdc",label:"Breadth-first search"},{lines:[15,26],color:"#e3ffff",label:"Increase flow along found path"}],implementation:l().mark((function e(n){var t,r,i,o,g,s,$,c,u,f,m,d,E,p,T,N,b;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=n.getSourceNode(),r=n.getSinkNode(),i=0,e.next=5,{highlightedLines:[4,5],linearNodes:[]};case 5:g=[t],o={},s=[];case 8:if(!(g.length>0)||o[r.getId()]){e.next=43;break}return e.next=11,{highlightedLines:[7],linearNodes:g,graphMutations:[]};case 11:return $=g.shift(),e.next=14,{highlightedLines:[8],linearNodes:g,graphMutations:[new h.E0($)]};case 14:s.push(new h.E0($).inverse()),c=(0,a.Z)($.getOutgoingEdges()),e.prev=16,c.s();case 18:if((u=c.n()).done){e.next=33;break}return f=u.value,e.next=22,{highlightedLines:[9],linearNodes:g,graphMutations:[new h.Lb(f)]};case 22:if(s.push(new h.Lb(f).inverse()),void 0!==o[f.getTargetNode().getId()]||f.getTargetNode().isEqualTo(t)||!(f.getCapacity()>f.getFlow())){e.next=29;break}return e.next=26,{highlightedLines:[10,11],linearNodes:g,graphMutations:[new h.Lb(f)]};case 26:s.push(new h.Lb(f).inverse()),o[f.getTargetNode().getId()]=f,g.push(f.getTargetNode());case 29:if(!f.getTargetNode().isEqualTo(r)){e.next=31;break}return e.abrupt("break",33);case 31:e.next=18;break;case 33:e.next=38;break;case 35:e.prev=35,e.t0=e.catch(16),c.e(e.t0);case 38:return e.prev=38,c.f(),e.finish(38);case 41:e.next=8;break;case 43:return e.next=45,{highlightedLines:[15],linearNodes:g};case 45:if(void 0===o[r.getId()]){e.next=73;break}for(m=o[r.getId()],d=[];m;)d.push(new h.Lb(m),new h.E0(m.getSourceNode()),new h.E0(m.getTargetNode())),m=o[m.getSourceNode().getId()];return E=d.slice().reverse().map((function(e){return e.inverse()})),e.next=52,{highlightedLines:[16],linearNodes:g,graphMutations:[].concat(s,d)};case 52:p=1/0,T=o[r.getId()],N=T;case 55:if(void 0===T){e.next=62;break}return e.next=58,{highlightedLines:[18],linearNodes:g,graphMutations:[new h.Lb(N).inverse(),new h.Lb(T)]};case 58:p=Math.min(p,T.getCapacity()-T.getFlow()),T=o[T.getSourceNode().getId()],e.next=55;break;case 62:T=o[r.getId()];case 63:if(void 0===T){e.next=70;break}return b=T.getReverseEdge(),e.next=67,{highlightedLines:[22,23],linearNodes:g,graphMutations:[new h.vj(T,p),new h.vj(b,-p)]};case 67:T=o[T.getSourceNode().getId()],e.next=63;break;case 70:return i+=p,e.next=73,{highlightedLines:[25],linearNodes:g,graphMutations:E};case 73:if(void 0!==o[r.getId()]){e.next=5;break}case 74:return e.next=76,{highlightedLines:[28],linearNodes:[],done:!0};case 76:return e.abrupt("return",i);case 77:case"end":return e.stop()}}),e,null,[[16,35,38,41]])}))};n.default=g},7762:function(e,n,t){t.d(n,{Z:function(){return a}});var r=t(181);function a(e,n){var t="undefined"!==typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!t){if(Array.isArray(e)||(t=(0,r.Z)(e))||n&&e&&"number"===typeof e.length){t&&(e=t);var a=0,i=function(){};return{s:i,n:function(){return a>=e.length?{done:!0}:{done:!1,value:e[a++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,l=!0,h=!1;return{s:function(){t=t.call(e)},n:function(){var e=t.next();return l=e.done,e},e:function(e){h=!0,o=e},f:function(){try{l||null==t.return||t.return()}finally{if(h)throw o}}}}},168:function(e,n,t){function r(e,n){return n||(n=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(n)}}))}t.d(n,{Z:function(){return r}})}}]);
//# sourceMappingURL=769.63290623.chunk.js.map