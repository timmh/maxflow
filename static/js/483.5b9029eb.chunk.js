"use strict";(self.webpackChunkmaxflow=self.webpackChunkmaxflow||[]).push([[483],{2483:function(e,t,n){n.r(t);var r,a=n(4165),i=n(7762),o=n(168),l=n(6357),g={name:"Ford\u2013Fulkerson-Depth-First",linearDataStructure:"stack",pseudocode:function(e){var t=e.sourceName,n=e.sinkName;return String.raw(r||(r=(0,o.Z)(["\n    \begin{algorithm}\n    \begin{algorithmic}\n    PROCEDURE{Ford-Fulkerson}{$G=(V, E), "," in V, "," in V$}\n        STATE $f = 0$\n        REPEAT\n            STATE $p = left[ \right]$\n            STATE $u = left[ "," \right]$ COMMENT{create stack}\n            WHILE{$u_mathrm{height}$ > 0}\n                STATE $c =$ CALL{pop}{$u$}\n                FOR{edge $e$ originating from $c$}\n                    IF{$e_mathrm{target} \notin p$ AND $e_mathrm{target} \neq ","$ AND $e_mathrm{capacity} > e_mathrm{flow}$}\n                        STATE $p[e_mathrm{target}] = e$\n                        STATE CALL{push}{$u$, $e_mathrm{target}$}\n                    ENDIF\n                ENDFOR\n            ENDWHILE\n            IF{$p[","] \neq \varnothing$}\n                STATE $Delta f = infty$\n                FOR{$e in p$}\n                    STATE $Delta f = $ CALL{min}{$Delta f$, $e_mathrm{capacity} - e_mathrm{flow}$}\n                ENDFOR\n                FOR{$e in p$}\n                    STATE $r = e_mathrm{reverse}$\n                    STATE $e_mathrm{flow} = e_mathrm{flow} + Delta f$\n                    STATE $r_mathrm{flow} = r_mathrm{flow} - Delta f$\n                ENDFOR\n                STATE $f = f + Delta f$\n            ENDIF\n        UNTIL{$p[","] = \varnothing$}\n        RETURN $f$\n    ENDPROCEDURE\n    end{algorithmic}\n    end{algorithm}\n  "],["\n    \\begin{algorithm}\n    \\begin{algorithmic}\n    \\PROCEDURE{Ford-Fulkerson}{$G=(V,\\ E),\\ "," \\in V,\\ "," \\in V$}\n        \\STATE $f = 0$\n        \\REPEAT\n            \\STATE $p = \\left[\\ \\right]$\n            \\STATE $u = \\left[\\ ","\\ \\right]$ \\COMMENT{create stack}\n            \\WHILE{$u_\\mathrm{height}$ > 0}\n                \\STATE $c =$ \\CALL{pop}{$u$}\n                \\FOR{edge $e$ originating from $c$}\n                    \\IF{$e_\\mathrm{target} \\notin p$ \\AND $e_\\mathrm{target} \\neq ","$ \\AND $e_\\mathrm{capacity} > e_\\mathrm{flow}$}\n                        \\STATE $p[e_\\mathrm{target}] = e$\n                        \\STATE \\CALL{push}{$u$, $e_\\mathrm{target}$}\n                    \\ENDIF\n                \\ENDFOR\n            \\ENDWHILE\n            \\IF{$p[","] \\neq \\varnothing$}\n                \\STATE $\\Delta f = \\infty$\n                \\FOR{$e \\in p$}\n                    \\STATE $\\Delta f = $ \\CALL{min}{$\\Delta f$, $e_\\mathrm{capacity} - e_\\mathrm{flow}$}\n                \\ENDFOR\n                \\FOR{$e \\in p$}\n                    \\STATE $r = e_\\mathrm{reverse}$\n                    \\STATE $e_\\mathrm{flow} = e_\\mathrm{flow} + \\Delta f$\n                    \\STATE $r_\\mathrm{flow} = r_\\mathrm{flow} - \\Delta f$\n                \\ENDFOR\n                \\STATE $f = f + \\Delta f$\n            \\ENDIF\n        \\UNTIL{$p[","] = \\varnothing$}\n        \\RETURN $f$\n    \\ENDPROCEDURE\n    \\end{algorithmic}\n    \\end{algorithm}\n  "])),t,n,t,t,n,n)},references:[{label:"Ford-Fulkerson Algorithm at Brilliant.org",url:"https://brilliant.org/wiki/ford-fulkerson-algorithm/"},{label:"L. R. Ford, D. R. Fulkerson: Maximal Flow Through a Network (1956)",url:"https://www.cambridge.org/core/services/aop-cambridge-core/content/view/5D6E55D3B06C4F7B1043BC1D82D40764/S0008414X00036890a.pdf/maximal_flow_through_a_network.pdf"}],labeledBlocks:[{lines:[4,14],label:"Depth-first search"},{lines:[15,26],label:"Increase flow along found path"}],implementation:(0,a.Z)().mark((function e(t){var n,r,o,g,$,h,s,u,c,f,m,d,E,T,p,N,w;return(0,a.Z)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:n=t.getSourceNode(),r=t.getSinkNode(),o=0;case 3:return $=[n],g={},h=[],e.next=8,{highlightedLines:[4,5],linearNodes:$};case 8:if(!($.length>0)||g[r.getId()]){e.next=40;break}if(!(s=g[$[$.length-1].getId()])){e.next=14;break}return h.push(new l.Lb(s).inverse()),e.next=14,{highlightedLines:[10,11],linearNodes:$,graphMutations:[new l.Lb(s)]};case 14:return u=$.pop(),h.push(new l.E0(u).inverse()),e.next=18,{highlightedLines:[7],linearNodes:$,graphMutations:[new l.E0(u)]};case 18:c=(0,i.Z)(u.getOutgoingEdges()),e.prev=19,c.s();case 21:if((f=c.n()).done){e.next=30;break}return m=f.value,void 0===g[m.getTargetNode().getId()]&&!m.getTargetNode().isEqualTo(n)&&m.getCapacity()>m.getFlow()&&(g[m.getTargetNode().getId()]=m,$.push(m.getTargetNode())),e.next=26,{highlightedLines:[10,11],linearNodes:$};case 26:if(!m.getTargetNode().isEqualTo(r)){e.next=28;break}return e.abrupt("break",30);case 28:e.next=21;break;case 30:e.next=35;break;case 32:e.prev=32,e.t0=e.catch(19),c.e(e.t0);case 35:return e.prev=35,c.f(),e.finish(35);case 38:e.next=8;break;case 40:if(void 0===g[r.getId()]){e.next=61;break}for(d=g[r.getId()],E=[];d;)E.push(new l.Lb(d),new l.E0(d.getSourceNode()),new l.E0(d.getTargetNode())),d=g[d.getSourceNode().getId()];return T=E.slice().reverse().map((function(e){return e.inverse()})),e.next=47,{highlightedLines:[16],linearNodes:$,graphMutations:[].concat(h,E)};case 47:for(p=1/0,N=g[r.getId()];void 0!==N;)p=Math.min(p,N.getCapacity()-N.getFlow()),N=g[N.getSourceNode().getId()];N=g[r.getId()];case 51:if(void 0===N){e.next=58;break}return w=N.getReverseEdge(),e.next=55,{highlightedLines:[22,23],linearNodes:$,graphMutations:[new l.vj(N,p),new l.vj(w,-p)]};case 55:N=g[N.getSourceNode().getId()],e.next=51;break;case 58:return o+=p,e.next=61,{highlightedLines:[25],linearNodes:$,graphMutations:T};case 61:if(void 0!==g[r.getId()]){e.next=3;break}case 62:return e.next=64,{highlightedLines:[28],linearNodes:[],done:!0};case 64:return e.abrupt("return",o);case 65:case"end":return e.stop()}}),e,null,[[19,32,35,38]])}))};t.default=g},7762:function(e,t,n){n.d(t,{Z:function(){return a}});var r=n(181);function a(e,t){var n="undefined"!==typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=(0,r.Z)(e))||t&&e&&"number"===typeof e.length){n&&(e=n);var a=0,i=function(){};return{s:i,n:function(){return a>=e.length?{done:!0}:{done:!1,value:e[a++]}},e:function(e){throw e},f:i}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,l=!0,g=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return l=e.done,e},e:function(e){g=!0,o=e},f:function(){try{l||null==n.return||n.return()}finally{if(g)throw o}}}}},168:function(e,t,n){function r(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}n.d(t,{Z:function(){return r}})}}]);
//# sourceMappingURL=483.5b9029eb.chunk.js.map