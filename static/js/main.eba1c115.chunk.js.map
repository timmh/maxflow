{"version":3,"sources":["algorithms/index.ts","variables.scss","CytoscapeGraph.ts","App.scss","algorithms lazy /^/.//.*/.ts$/ groupOptions: {} namespace object","Pseudocode.tsx","NodeQueueStackVisualization.tsx","Controls.tsx","utils/useInterval.ts","utils/io.ts","utils/assertValidGraph.ts","Switch.tsx","Header.tsx","Dropdown.tsx","Checkbox.tsx","GraphControls.tsx","GraphVisualization.tsx","utils/defaultHash.ts","utils/useQueue.ts","Footer.tsx","References.tsx","App.tsx","index.tsx"],"names":["algorithms","label","filename","module","exports","GraphEdgeFlowMutation","edge","df","_edge","_df","apply","_cyEdge","data","inverse","this","GraphEdgeHighlightMutation","mode","_mode","addClass","emit","removeClass","GraphNodeHighlightMutation","node","_node","_cyNode","GraphNodeHeightMutation","dh","_dh","getHeight","GraphNodeExcessMutation","de","_de","getExcess","GraphCombinedMutation","graphMutations","_graphMutations","forEach","graphMutation","reverse","map","Edge","cyEdge","getCapacity","getFlow","getReverseEdge","parallelEdges","difference","codirectedEdges","getSourceNode","Node","source","getTargetNode","target","getId","id","isEqualTo","otherEdge","cyNode","getOutgoingEdges","outgoers","sort","edge1","edge2","label1","label2","toArray","getType","getLabel","height","excess","otherNode","Graph","cy","_cy","nodes","getSinkNode","getNodes","getEdges","edges","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","all","slice","keys","Object","Pseudocode","algorithm","highlightedLines","algorithmPseudocodeArgs","containerRef","useRef","useEffect","el","current","innerHTML","pseudocode","render","lineNumber","querySelectorAll","element","t","styleVariables","classList","remove","line","i","className","includes","add","labeledBlocks","labeledBlock","lines","setAttribute","style","setProperty","color","ref","modeToName","queue","stack","modeToVariable","NodeQueueStackVisualization","size","icon","faArrowLeft","margin","key","Controls","state","setState","stepBackward","stepForward","reset","currentAlgorithm","setCurrentAlgorithm","title","onClick","disabled","faStepBackward","faPlay","faPause","faStepForward","faUndo","value","onChange","evt","useInterval","callback","delay","dependencies","savedCallback","setInterval","clearInterval","tgf2cyto","tgf","tokens","split","trim","filter","startsWith","token","length","type","undefined","group","classes","capacity","parseInt","flow","push","cyto2tgf","join","assertValidGraph","Switch","choices","activeChoice","onChoose","choice","strokeStyle","stroke","strokeWidth","strokeLinecap","fill","Header","waveRef","animate","tRef","dtRef","nextFrame","useCallback","path","Array","x","width","y","Math","min","pow","sin","max","requestAnimationFrame","onMouseEnter","onMouseLeave","viewBox","d","Dropdown","children","useState","open","setOpen","toggle","stopPropagation","preventDefault","Checkbox","checked","GraphControls","autoLayout","setAutoLayout","onImport","onExport","onExportPng","graphDisplayState","setGraphDisplayState","isBigScreen","useMediaQuery","query","cytoscape","use","cola","edgehandles","cxtmenu","nodeHtmlLabel","graphToHash","encodeURIComponent","str","btoa","replace","hashToGraph","hash","decodeURIComponent","substr","atob","GraphVisualization","props","container","layout","menus","readyPromise","getEdgeLabel","getEdgeCurveStyle","getEdgeVisibility","interactionDisabled","getHighlightColor","restyle","getStyle","selector","visibility","shape","opacity","destroy","elementsFromUrl","window","location","err","Swal","fire","elements","boxSelectionEnabled","minZoom","maxZoom","wheelSensitivity","fontFamily","tpl","hasMetadata","on","exp","history","pushState","replaceState","document","setTimeout","from","resetLayout","enableMenus","preview","handleNodes","hideHandleOnSourceNodeMove","edgeParams","edgeType","sourceNode","targetNode","intersection","complete","addedEles","hasClass","visualizationRef","nodeMenu","menuRadius","commands","content","select","a","input","inputValue","showCancelButton","inputOptions","default","sink","edgeMenu","reverseEdge","edgeCapacity","isNaN","coreMenu","String","fromCharCode","charCodeAt","random","renderedPosition","disableMenus","values","menu","stop","name","edgeLength","randomize","infinite","fit","handleDisconnected","layoutRunning","run","componentDidUpdate","prevProps","prevState","hide","disable","enable","getDerivedStateFromProps","FontFaceObserver","load","disableInteraction","React","Component","useQueue","initialQueue","setQueue","enqueue","obj","objs","Footer","onTourPressed","role","href","References","references","url","initialStepResult","linearNodes","preferences","algorithmName","assign","JSON","parse","localStorage","getItem","removeItem","setPreferences","setItem","stringify","tourSteps","step","disableBeacon","App","visRef","setVisRef","setAlgorithmName","setAlgorithm","mod","algorithmImplementationInstance","setAlgorithmImplementationInstance","resetAlgorithm","implementation","algorithmState","setAlgorithmState","enqueueHighlightedLines","resetHighlightedLines","stepBackwardBuffer","setStepBackwardBuffer","stepBackwardBufferIndex","setStepBackwardBufferIndex","sourceName","sinkName","setAlgorithmPseudocodeArgs","showTour","setShowTour","activeView","setActiveView","toString","result","yieldResult","next","done","batch","handleVisChange","handleTourCallback","status","Joyride","FINISHED","SKIPPED","onDrop","acceptedFiles","reader","FileReader","onabort","onerror","onload","json","readAsText","useDropzone","noClick","getRootProps","getInputProps","openDropzone","classNames","FileSaver","saveAs","Blob","autoBom","querySelector","domtoimage","toBlob","nodeLabelBlob","nextVisualizationRef","currentResult","$","removeData","linearDataStructure","continuous","scrollToFirstStep","showProgress","showSkipButton","steps","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.eba1c115.chunk.js","sourcesContent":["/**\n * The list of available algorithms.\n * Each algorithm must implement the [[Algorithm]] interface\n * and reside in the `algorithms` directory with a file extension\n * of `.ts`\n */\n\nconst algorithms = [\n  {\n    label: \"Edmonds-Karp\",\n    filename: \"Edmonds-Karp\"\n  },\n  {\n    label: \"Ford-Fulkerson (depth-first)\",\n    filename: \"Ford–Fulkerson-Depth-First\"\n  },\n  {\n    label: \"Push-Relabel (generic)\",\n    filename: \"Push-Relabel\"\n  }\n];\n\nexport default algorithms;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"colorBlack\":\"#000\",\"colorWhite\":\"#fff\",\"colorGrey\":\"#eee\",\"colorHighlight\":\"gold\",\"colorHandles\":\"red\",\"highlightedLinesCount\":\"2\",\"nodeSize\":\"50\",\"autoStepInterval\":\"1000\",\"stepTransitionDuration\":\"500\",\"minWidthBigScreen\":\"1000px\"};","import cytoscape from \"cytoscape\";\n\n/**\n * The interface each graph mutation (both visual and non-visual)\n * has to conform to\n */\nexport interface GraphMutation {\n  /** applies the mutation on the cytoscape.js instance */\n  apply: () => void;\n\n  /** returns the inverse mutation, primarily used for backstepping */\n  inverse: () => GraphMutation;\n}\n\n/**\n * Mutates the flow along an edge\n */\nexport class GraphEdgeFlowMutation implements GraphMutation {\n  _edge: Edge;\n  _df: number;\n\n  constructor(edge: Edge, df: number) {\n    this._edge = edge;\n    this._df = df;\n  }\n\n  apply = () => {\n    this._edge._cyEdge.data(\"flow\", this._edge._cyEdge.data(\"flow\") + this._df);\n  };\n\n  inverse = () => new GraphEdgeFlowMutation(this._edge, -this._df);\n}\n\n/**\n * (Un)highlights an edge\n */\nexport class GraphEdgeHighlightMutation implements GraphMutation {\n  _edge: Edge;\n  _mode: \"add\" | \"remove\";\n\n  constructor(edge: Edge, mode: \"add\" | \"remove\" = \"add\") {\n    this._edge = edge;\n    this._mode = mode;\n  }\n\n  apply = () => {\n    if (this._mode === \"add\") {\n      this._edge._cyEdge.addClass(\"highlighted\").emit(\"restyle\");\n    } else {\n      this._edge._cyEdge.removeClass(\"highlighted\").emit(\"restyle\");\n    }\n  };\n\n  inverse = () =>\n    new GraphEdgeHighlightMutation(\n      this._edge,\n      this._mode === \"add\" ? \"remove\" : \"add\"\n    );\n}\n\n/**\n * (Un)highlights a node\n */\nexport class GraphNodeHighlightMutation implements GraphMutation {\n  _node: Node;\n  _mode: \"add\" | \"remove\";\n\n  constructor(node: Node, mode: \"add\" | \"remove\" = \"add\") {\n    this._node = node;\n    this._mode = mode;\n  }\n\n  apply = () => {\n    if (this._mode === \"add\") {\n      this._node._cyNode.addClass(\"highlighted\").emit(\"restyle\");\n    } else {\n      this._node._cyNode.removeClass(\"highlighted\").emit(\"restyle\");\n    }\n  };\n\n  inverse = () =>\n    new GraphNodeHighlightMutation(\n      this._node,\n      this._mode === \"add\" ? \"remove\" : \"add\"\n    );\n}\n\n/**\n * Mutates the height of a node\n */\nexport class GraphNodeHeightMutation implements GraphMutation {\n  _node: Node;\n  _dh: number;\n\n  constructor(node: Node, dh: number) {\n    this._node = node;\n    this._dh = dh;\n  }\n\n  apply = () => {\n    this._node._cyNode.data(\"height\", this._node.getHeight() + this._dh);\n  };\n\n  inverse = () => new GraphNodeHeightMutation(this._node, -this._dh);\n}\n\n/**\n * Mutates the excess of a node\n */\nexport class GraphNodeExcessMutation implements GraphMutation {\n  _node: Node;\n  _de: number;\n\n  constructor(node: Node, de: number) {\n    this._node = node;\n    this._de = de;\n  }\n\n  apply = () => {\n    this._node._cyNode.data(\"excess\", this._node.getExcess() + this._de);\n  };\n\n  inverse = () => new GraphNodeExcessMutation(this._node, -this._de);\n}\n\nexport class GraphCombinedMutation implements GraphMutation {\n  _graphMutations: GraphMutation[];\n\n  constructor(graphMutations: GraphMutation[]) {\n    this._graphMutations = graphMutations;\n  }\n\n  apply = () => {\n    this._graphMutations.forEach(graphMutation => {\n      graphMutation.apply();\n    });\n  };\n\n  inverse = () => {\n    return new GraphCombinedMutation(\n      [...this._graphMutations]\n        .reverse()\n        .map(graphMutation => graphMutation.inverse())\n    );\n  };\n}\n\n/**\n * The Edge class wraps cytoscape.js edges to allow the algorithms to be less\n * dependent on the actual graph implementation\n */\nexport class Edge {\n  _cyEdge: cytoscape.EdgeSingular;\n\n  constructor(cyEdge: cytoscape.EdgeSingular) {\n    this._cyEdge = cyEdge;\n  }\n\n  getCapacity = () => this._cyEdge.data(\"capacity\");\n  getFlow = () => this._cyEdge.data(\"flow\");\n  getReverseEdge = () =>\n    new Edge(\n      this._cyEdge.parallelEdges().difference(this._cyEdge.codirectedEdges())[0]\n    );\n  getSourceNode = () => new Node(this._cyEdge.source());\n  getTargetNode = () => new Node(this._cyEdge.target());\n  getId = () => this._cyEdge.id();\n  isEqualTo = (otherEdge: Edge) => this._cyEdge.id() === otherEdge._cyEdge.id();\n}\n\n/**\n * The Node class wraps cytoscape.js nodes to allow the algorithms to be less\n * dependent on the actual graph implementation\n */\nexport class Node {\n  _cyNode: cytoscape.NodeSingular;\n\n  constructor(cyNode: cytoscape.NodeSingular) {\n    this._cyNode = cyNode;\n  }\n\n  getOutgoingEdges = () =>\n    this._cyNode\n      .outgoers(\"edge\")\n      .sort((edge1, edge2) => {\n        const label1 = (edge1 as cytoscape.EdgeSingular).target().data(\"label\");\n        const label2 = (edge2 as cytoscape.EdgeSingular).target().data(\"label\");\n        if (label1 < label2) return -1;\n        if (label1 > label2) return 1;\n        return 0;\n      })\n      .toArray()\n      .map(cyEdge => new Edge(cyEdge as cytoscape.EdgeSingular));\n\n  getType = () => {\n    if (this._cyNode.data(\"type\") === \"source\") return \"source\";\n    if (this._cyNode.data(\"type\") === \"sink\") return \"sink\";\n    return \"default\";\n  };\n\n  getLabel = () => {\n    return `${this._cyNode.data(\"label\")}`;\n  };\n\n  getHeight = () => {\n    const height = this._cyNode.data(\"height\");\n    if (typeof height === \"number\") {\n      return height;\n    } else {\n      return 0;\n    }\n  };\n\n  getExcess = () => {\n    const excess = this._cyNode.data(\"excess\");\n    if (typeof excess === \"number\") {\n      return excess;\n    } else {\n      return 0;\n    }\n  };\n\n  getId = () => this._cyNode.id();\n  isEqualTo = (otherNode: Node) => this._cyNode.id() === otherNode._cyNode.id();\n}\n\n/**\n * The Graph class wraps the cytoscape.js graph to allow the algorithms to be less\n * dependent on the actual graph implementation\n */\nexport class Graph {\n  _cy: cytoscape.Core;\n\n  constructor(cy: cytoscape.Core) {\n    this._cy = cy;\n  }\n\n  getSourceNode = () =>\n    new Node(this._cy.nodes('.graph-node[type=\"source\"]')[0]);\n  getSinkNode = () => new Node(this._cy.nodes('.graph-node[type=\"sink\"]')[0]);\n  getNodes = () => this._cy.nodes(\".graph-node\").map(node => new Node(node));\n  getEdges = () => this._cy.edges(\".graph-edge\").map(edge => new Edge(edge));\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"colorBlack\":\"#000\",\"colorWhite\":\"#fff\",\"colorGrey\":\"#eee\",\"colorHighlight\":\"gold\",\"colorHandles\":\"red\",\"highlightedLinesCount\":\"2\",\"nodeSize\":\"50\",\"autoStepInterval\":\"1000\",\"stepTransitionDuration\":\"500\",\"minWidthBigScreen\":\"1000px\"};","var map = {\n\t\"./Edmonds-Karp.ts\": [\n\t\t96,\n\t\t3\n\t],\n\t\"./Ford–Fulkerson-Depth-First.ts\": [\n\t\t97,\n\t\t4\n\t],\n\t\"./Push-Relabel.ts\": [\n\t\t98,\n\t\t5\n\t],\n\t\"./index.ts\": [\n\t\t27\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 94;\nmodule.exports = webpackAsyncContext;","import React, { useRef, useEffect } from \"react\";\nimport pseudocode from \"pseudocode\";\nimport * as styleVariables from \"./variables.scss\";\nimport { Algorithm, AlgorithmPseudocodeArgs } from \"./algorithm\";\n\n/**\n * The Pseudocode component shows the latex pseudocode listing\n *\n * @param props component props\n * @param props.algorithm the selected [[Algorithm]]\n * @param props.highlightedLines the line numbers which should be highlighted\n */\nconst Pseudocode: React.FC<{\n  algorithm: Algorithm;\n  highlightedLines: number[][];\n  algorithmPseudocodeArgs: AlgorithmPseudocodeArgs;\n}> = ({ algorithm, highlightedLines, algorithmPseudocodeArgs }) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    const el = containerRef.current;\n    if (!el) return;\n    el.innerHTML = \"\";\n\n    pseudocode.render(algorithm.pseudocode(algorithmPseudocodeArgs), el, {\n      lineNumber: true\n      // noEnd: true\n    });\n  }, [algorithm, algorithmPseudocodeArgs]);\n\n  useEffect(() => {\n    const el = containerRef.current;\n    if (!el) return;\n    el.querySelectorAll(\".ps-line\").forEach(element => {\n      for (let t = 0; t < styleVariables.highlightedLinesCount; t++) {\n        element.classList.remove(`ps-line--highlighted-${t}`);\n      }\n    });\n    el.querySelectorAll(\".ps-line\").forEach((line, i) => {\n      highlightedLines.forEach((highlightedLines, t) => {\n        const className = `ps-line--highlighted-${t}`;\n        if (highlightedLines.includes(i + 1)) {\n          line.classList.add(className);\n        } else {\n          line.classList.remove(className);\n        }\n      });\n    });\n  }, [algorithm, highlightedLines]);\n\n  useEffect(() => {\n    const el = containerRef.current;\n    if (!el) return;\n    el.querySelectorAll(\".ps-line\").forEach((line, i) => {\n      algorithm.labeledBlocks.forEach(labeledBlock => {\n        if (i + 1 === labeledBlock.lines[0]) {\n          (line as HTMLElement).setAttribute(\n            \"data-block-label\",\n            `// ${labeledBlock.label}`\n          );\n        }\n        if (i + 1 >= labeledBlock.lines[0] && i < labeledBlock.lines[1]) {\n          (line as HTMLElement).style.setProperty(\n            \"--block-color\",\n            labeledBlock.color\n          );\n        }\n      });\n    });\n  }, [algorithm]);\n\n  return (\n    <div className=\"pseudocode\">\n      <div ref={containerRef} />\n    </div>\n  );\n};\n\nexport default Pseudocode;\n","import React from \"react\";\nimport { Node } from \"./CytoscapeGraph\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArrowLeft } from \"@fortawesome/free-solid-svg-icons\";\n\nconst modeToName = {\n  queue: \"Queue\",\n  stack: \"Stack\"\n};\n\nconst modeToVariable = {\n  queue: \"q\",\n  stack: \"u\"\n};\n\n/**\n * Provides a linear visualization of nodes, either as a queue or as a stack\n *\n * @param props component props\n * @param props.nodes the nodes to be visualized\n * @param props.mode whether to visualize a queue or a stack\n */\nconst NodeQueueStackVisualization = ({\n  nodes,\n  mode\n}: {\n  nodes: Node[];\n  mode: \"queue\" | \"stack\";\n}) => {\n  return (\n    <div className=\"node-queue-stack-visualization\">\n      <span className=\"node-queue-stack-visualization__title\">{`${modeToName[mode]} ${modeToVariable[mode]} = `}</span>\n      <div className=\"node-queue-stack-visualization__elements\">\n        <div className=\"node-queue-stack-visualization__elements-front\">\n          <div className=\"node-queue-stack-visualization__element\">\n            {mode === \"queue\" && (\n              <FontAwesomeIcon\n                size=\"sm\"\n                icon={faArrowLeft}\n                style={{ margin: \"0.2em\" }}\n              />\n            )}\n            {mode === \"queue\" ? \"out\" : \"bottom\"}\n          </div>\n          {nodes.map(node => (\n            <div\n              key={node.getId()}\n              className=\"node-queue-stack-visualization__element\"\n            >\n              <div\n                className={`node-queue-stack-visualization__label node-queue-stack-visualization__label--type-${node.getType()}`}\n              >\n                {node.getLabel()}\n              </div>\n            </div>\n          ))}\n        </div>\n        <div className=\"node-queue-stack-visualization__elements-back\">\n          <div className=\"node-queue-stack-visualization__element\">\n            {mode === \"queue\" && (\n              <FontAwesomeIcon\n                size=\"sm\"\n                icon={faArrowLeft}\n                style={{ margin: \"0.2em\" }}\n              />\n            )}\n            {mode === \"queue\" ? \"in\" : \"top\"}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NodeQueueStackVisualization;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faPlay,\n  faPause,\n  faStepForward,\n  faUndo,\n  faStepBackward\n} from \"@fortawesome/free-solid-svg-icons\";\n\n/**\n * The Controls component renders above the pseudocode listing\n * and allows stepping through the algorithm\n *\n * @param props component props\n * @param props.state the current state of the algorithm instance\n * @param props.setState allows setting the current state\n * @param props.stepBackward make one step backwards\n * @param props.stepForward make one step forwards\n * @param props.reset reset the problem instance to the initial state\n * @param props.algorithms a list of algorithms to show in the algorithm selector\n * @param props.currentAlgorithm the `value` of the currently selected algorithm\n * @param props.setCurrentAlgorithm allows selecting another algorithm using it's `value`\n */\nconst Controls: React.FC<{\n  state: \"stopped\" | \"auto\" | \"manual\" | \"finished\";\n  setState: (state: \"stopped\" | \"auto\" | \"manual\" | \"finished\") => void;\n  stepBackward?: () => void;\n  stepForward?: () => void;\n  reset: () => void;\n  algorithms: { value: string; label: string }[];\n  currentAlgorithm: string;\n  setCurrentAlgorithm: (algorithm: string) => void;\n}> = ({\n  state,\n  setState,\n  stepBackward,\n  stepForward,\n  reset,\n  algorithms,\n  currentAlgorithm,\n  setCurrentAlgorithm\n}) => {\n  return (\n    <div className=\"controls\">\n      <div className=\"controls__buttons\">\n        <button\n          title=\"Step Backward\"\n          className=\"controls__button\"\n          onClick={() => {\n            setState(\"manual\");\n            stepBackward && stepBackward();\n          }}\n          disabled={state === \"auto\" || !stepBackward}\n        >\n          <FontAwesomeIcon size=\"2x\" icon={faStepBackward} />\n        </button>\n        {state !== \"auto\" ? (\n          <button\n            title=\"Start\"\n            className=\"controls__button\"\n            onClick={() => setState(\"auto\")}\n            disabled={state === \"finished\"}\n          >\n            <FontAwesomeIcon size=\"2x\" icon={faPlay} />\n          </button>\n        ) : (\n          <button\n            title=\"Pause\"\n            className=\"controls__button\"\n            onClick={() => setState(\"manual\")}\n          >\n            <FontAwesomeIcon size=\"2x\" icon={faPause} />\n          </button>\n        )}\n        <button\n          title=\"Step Forward\"\n          className=\"controls__button\"\n          onClick={() => {\n            setState(\"manual\");\n            stepForward && stepForward();\n          }}\n          disabled={state === \"auto\" || !stepForward}\n        >\n          <FontAwesomeIcon size=\"2x\" icon={faStepForward} />\n        </button>\n        <button\n          title=\"Reset\"\n          className=\"controls__button\"\n          disabled={state === \"stopped\"}\n          onClick={() => reset()}\n        >\n          <FontAwesomeIcon size=\"2x\" icon={faUndo} />\n        </button>\n      </div>\n      <div className=\"controls__select\">\n        <select\n          value={currentAlgorithm}\n          onChange={evt => {\n            setCurrentAlgorithm(evt.target.value);\n          }}\n          disabled={state !== \"stopped\"}\n        >\n          {algorithms.map(algorithm => (\n            <option key={algorithm.value} value={algorithm.value}>\n              {algorithm.label}\n            </option>\n          ))}\n        </select>\n      </div>\n    </div>\n  );\n};\n\nexport default Controls;\n","import { useRef, useEffect } from \"react\";\n\n/**\n * A simple interval react hook\n *\n * @param callback is called at the specified frequency\n * @param delay in milliseconds, defines the frequency\n * @param dependencies which should invalidate the callback\n */\nfunction useInterval(\n  callback: () => void,\n  delay: number,\n  dependencies?: any[]\n) {\n  const savedCallback = useRef<() => void>();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback, dependencies]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback && savedCallback.current && savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport default useInterval;\n","import cytoscape, { EdgeSingular } from \"cytoscape\";\n\n/**\n * Parses a (subset of)\n * [Trivial Graph Format (TGF)](https://en.wikipedia.org/wiki/Trivial_Graph_Format)\n * and returns [cytoscape.js JSON](https://js.cytoscape.org/#notation/elements-json)\n *\n * @param tgf the graph in TGF format\n * @returns cytoscape element definitions\n */\nconst tgf2cyto: (tgf: String) => cytoscape.ElementDefinition[] = (\n  tgf: String\n) => {\n  const lines = tgf\n    .split(\"\\n\")\n    .map(line => line.trim())\n    .filter(line => !line.startsWith(\"#\"));\n\n  const tokens = lines.map(line =>\n    line.split(/\\W/).filter(token => token.length > 0)\n  );\n  const nodes = tokens\n    .filter(tokens => tokens.length === 1 || tokens.length === 2)\n    .map(tokens => {\n      let type = \"default\";\n      if (tokens[1] === \"source\") {\n        type = \"source\";\n      } else if (tokens[1] === \"sink\") {\n        type = \"sink\";\n      } else if (tokens[1] !== undefined) {\n        throw new Error(`Invalid node type: ${tokens[1]}`);\n      }\n      return {\n        data: {\n          id: tokens[0],\n          label: tokens[0],\n          type\n        },\n        group: \"nodes\" as \"nodes\" | \"edges\" | undefined,\n        classes: \"graph-node\"\n      };\n    });\n  const edges = tokens\n    .filter(tokens => tokens.length === 3)\n    .map(tokens => ({\n      data: {\n        id: `${tokens[0]}-${tokens[1]}`,\n        source: tokens[0],\n        target: tokens[1],\n        capacity: parseInt(tokens[2], 10) || 0,\n        flow: 0\n      },\n      group: \"edges\" as \"nodes\" | \"edges\" | undefined,\n      classes: \"graph-edge\"\n    }));\n\n  edges.forEach((edge: any) => {\n    if (nodes.filter(node => node.data.id === edge.data.source).length !== 1) {\n      throw new Error(\n        `Invalid graph: there is no single node with id ${edge.data.source}`\n      );\n    }\n    if (nodes.filter(node => node.data.id === edge.data.target).length !== 1) {\n      throw new Error(\n        `Invalid graph: there is no single node with id ${edge.data.target}`\n      );\n    }\n    if (\n      edges.filter(\n        (otherEdge: any) =>\n          edge.data.source === otherEdge.data.target &&\n          edge.data.target === otherEdge.data.source\n      ).length === 0\n    ) {\n      edges.push({\n        data: {\n          id: `${edge.data.target}-${edge.data.source}`,\n          source: edge.data.target,\n          target: edge.data.source,\n          capacity: 0,\n          flow: 0\n        },\n        group: \"edges\" as \"nodes\" | \"edges\" | undefined,\n        classes: \"graph-edge\"\n      });\n    }\n  });\n\n  const elements = [...nodes, ...edges];\n\n  return elements;\n};\n\n/**\n * Takes a [cytoscape.js](https://js.cytoscape.org/) instance\n * and returns the corresponding (subset of)\n * [Trivial Graph Format (TGF)](https://en.wikipedia.org/wiki/Trivial_Graph_Format)\n * representation\n *\n * @param cy the cytoscape.js instance\n * @returns TGF string representation\n */\nconst cyto2tgf = (cy: cytoscape.Core) => {\n  const nodes = cy\n    .nodes(\".graph-node\")\n    .map(node =>\n      [\n        node.data(\"label\"),\n        node.data(\"type\") !== \"default\" ? node.data(\"type\") : null\n      ]\n        .filter(e => !!e)\n        .join(\" \")\n    )\n    .join(\"\\n\");\n  const edges = cy\n    .edges(\".graph-edge\")\n    .filter(edge => edge.data(\"capacity\") > 0)\n    .map(edge =>\n      [\n        (edge as EdgeSingular).source().data(\"label\"),\n        (edge as EdgeSingular).target().data(\"label\"),\n        edge.data(\"capacity\")\n      ].join(\" \")\n    )\n    .join(\"\\n\");\n\n  return [nodes, edges].join(\"\\n\");\n};\n\nconst urlSafeBase64Encode = (str: string) =>\n  btoa(str)\n    .replace(/\\+/g, \"-\")\n    .replace(/\\//g, \"_\")\n    .replace(/=+$/, \"\");\n\nconst urlSafeBase64Decode = (str: string) =>\n  atob(\n    (str + \"===\")\n      .slice(0, str.length + (str.length % 4))\n      .replace(/-/g, \"+\")\n      .replace(/_/g, \"/\")\n  );\n\nexport { tgf2cyto, cyto2tgf, urlSafeBase64Encode, urlSafeBase64Decode };\n","import cytoscape from \"cytoscape\";\n\n/**\n * validates the graph for flow problems\n *\n * @param cy the cytoscape.js instance\n */\nconst assertValidGraph = (cy: cytoscape.Core) => {\n  if (\n    cy.nodes('node[type=\"source\"]').length !== 1 ||\n    cy.nodes('node[type=\"sink\"]').length !== 1\n  ) {\n    throw new Error(\n      \"Graph must have exactly one source node and one sink node\"\n    );\n  }\n};\n\nexport default assertValidGraph;\n","import React from \"react\";\n\n/**\n * Each choice has a user-facing label and an internal value\n */\ninterface Choice<T> {\n  value: T;\n  label: string;\n}\n\n/**\n * A generic Switch component\n *\n * @param props component props\n * @param props.choices a list of available [[Choice]]\n * @param props.onChoose called when a [[Choice]] is made\n */\nfunction Switch<T extends number | string>({\n  choices = [],\n  activeChoice,\n  onChoose\n}: {\n  choices: Choice<T>[];\n  activeChoice?: T;\n  onChoose: (value: T) => void;\n}) {\n  return (\n    <div className=\"switch\">\n      {choices.map(choice => (\n        <button\n          key={choice.value}\n          className=\"switch__button\"\n          disabled={choice.value === activeChoice}\n          onClick={() => onChoose(choice.value)}\n        >\n          {choice.label}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default Switch;\n","import React, { useRef, CSSProperties, useEffect, useCallback } from \"react\";\n\nconst width = 100;\nconst height = 50;\nconst nPoints = 150;\nconst margin = 50;\nconst magnitude = height / 5;\nconst arrowDx = 12.5;\nconst arrowDy = 12.5;\nconst dt = 0.5;\nconst eps = 1e-3;\n\nconst strokeStyle: CSSProperties = {\n  stroke: \"#000000\",\n  strokeWidth: \"3px\",\n  strokeLinecap: \"round\",\n  fill: \"none\"\n};\n\nconst Header = () => {\n  const waveRef = useRef<SVGPathElement>(null);\n  const animate = useRef(false);\n  const tRef = useRef(0);\n  const dtRef = useRef(0);\n\n  const nextFrame = useCallback(() => {\n    if (!waveRef.current) return;\n\n    const path =\n      \"M\" +\n      [...Array(nPoints).keys()]\n        .map(i => {\n          const c = Math.min(1, Math.pow(Math.min(i, nPoints - i) / margin, 2));\n          const x = i * ((width * 0.8) / nPoints) + 0.1 * width;\n          const y =\n            height / 2 + c * magnitude * Math.sin((i + 2 + tRef.current) / 10);\n          return `${x},${y}`;\n        })\n        .join(\" L\");\n\n    waveRef.current.setAttribute(\"d\", path);\n\n    if (animate.current) {\n      dtRef.current = Math.min(dt, Math.max(0.1, dtRef.current) * 1.1);\n    } else {\n      dtRef.current *= 0.95;\n    }\n    if (dtRef.current > eps) {\n      tRef.current += dtRef.current;\n      requestAnimationFrame(nextFrame);\n    } else {\n      dtRef.current = 0;\n    }\n  }, []);\n\n  useEffect(() => {\n    nextFrame();\n  }, [nextFrame]);\n\n  return (\n    <div\n      className=\"header\"\n      onMouseEnter={() => {\n        animate.current = true;\n        if (dtRef.current === 0) {\n          nextFrame();\n        }\n      }}\n      onMouseLeave={() => {\n        animate.current = false;\n      }}\n    >\n      <svg className=\"header__icon\" viewBox={`${0} ${0} ${width} ${height}`}>\n        <path ref={waveRef} style={strokeStyle} d=\"\"></path>\n        <path\n          style={strokeStyle}\n          d={[\n            `M${0.1 * width},${height / 2} l${arrowDx},${-arrowDy}`,\n            `M${0.1 * width},${height / 2} l${arrowDx},${arrowDy}`,\n            `M${0.9 * width},${height / 2} l${-arrowDx},${-arrowDy}`,\n            `M${0.9 * width},${height / 2} l${-arrowDx},${arrowDy}`\n          ].join(\" \")}\n        ></path>\n      </svg>\n      <h1>Maxflow Algorithm Visualization</h1>\n    </div>\n  );\n};\n\nexport default Header;\n","import React, { useState, useCallback } from \"react\";\n\nconst Dropdown: React.FunctionComponent<{\n  title: string;\n  size: \"s\" | \"m\" | \"l\";\n}> = ({ title, size, children }) => {\n  const [open, setOpen] = useState(false);\n\n  const toggle = useCallback(() => {\n    setOpen(!open);\n  }, [open]);\n\n  return (\n    <div className={`dropdown dropdown--size-${size}`}>\n      <button\n        className=\"dropdown__button\"\n        onClick={evt => {\n          evt.stopPropagation();\n          evt.preventDefault();\n          toggle();\n        }}\n      >\n        <span></span>\n        <span>{title}</span>\n        <span>{open ? \"▲\" : \"▼\"}</span>\n      </button>\n      {open && (\n        <div\n          className=\"dropdown__content\"\n          onClick={evt => {\n            evt.stopPropagation();\n            evt.preventDefault();\n            toggle();\n          }}\n        >\n          {children}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Dropdown;\n","import React from \"react\";\n\nconst Checkbox: React.FunctionComponent<{\n  checked: boolean;\n  onChange: (checked: boolean) => void;\n}> = ({ checked, onChange, children }) => (\n  <label className=\"checkbox\" onClick={() => onChange(!checked)}>\n    <input\n      type=\"checkbox\"\n      checked={checked}\n      onChange={evt => onChange(evt.target.checked)}\n    />\n    {children}\n  </label>\n);\n\nexport default Checkbox;\n","import React from \"react\";\nimport Switch from \"./Switch\";\nimport Header from \"./Header\";\nimport { useMediaQuery } from \"react-responsive\";\nimport * as styleVariables from \"./variables.scss\";\nimport Dropdown from \"./Dropdown\";\nimport Checkbox from \"./Checkbox\";\n\nexport type GraphDisplayState = \"flow\" | \"residual\" | \"original_flow\";\n\n/**\n * The GraphControls component renders graph display options\n * and I/O actions\n *\n * @param props component props\n * @param props.autoLayout whether the layout runs continuously\n * @param props.setAutoLayout updates the autoLayout prop\n * @param props.onImport called when the import button is pressed\n * @param props.onExport called when the export button is pressed\n * @param props.onExportPng called when the export PNG button is pressed\n * @param props.setGraphDisplayState updates the [[GraphDisplayState]]\n */\nconst GraphControls = ({\n  autoLayout,\n  setAutoLayout,\n  onImport,\n  onExport,\n  onExportPng,\n  graphDisplayState,\n  setGraphDisplayState\n}: {\n  autoLayout: boolean;\n  setAutoLayout: (autoLayout: boolean) => void;\n  onImport: () => void;\n  onExport: () => void;\n  onExportPng: () => void;\n  graphDisplayState: GraphDisplayState;\n  setGraphDisplayState: (graphDisplayState: GraphDisplayState) => void;\n}) => {\n  const isBigScreen = useMediaQuery({\n    query: `(min-width: ${styleVariables.minWidthBigScreen})`\n  });\n\n  return (\n    <div className=\"graph-controls\">\n      {isBigScreen && <Header />}\n      <Dropdown title=\"Layout\" size=\"m\">\n        <Checkbox\n          checked={autoLayout}\n          onChange={checked => setAutoLayout(checked)}\n        >\n          Automatic Layout\n        </Checkbox>\n      </Dropdown>\n      <Dropdown title=\"I/O\" size=\"s\">\n        <button onClick={() => onImport()}>Import</button>\n        <button onClick={() => onExport()}>Export</button>\n        <button onClick={() => onExportPng()}>Export PNG</button>\n      </Dropdown>\n      <Switch\n        choices={[\n          { value: \"flow\", label: \"Flow\" },\n          { value: \"residual\", label: \"Residual\" },\n          { value: \"original_flow\", label: \"Original\" }\n        ]}\n        activeChoice={graphDisplayState}\n        onChoose={graphDisplayState => setGraphDisplayState(graphDisplayState)}\n      />\n    </div>\n  );\n};\n\nexport default GraphControls;\n","import React from \"react\";\nimport cytoscape, {\n  EdgeSingular,\n  NodeSingular,\n  EdgeCollection\n} from \"cytoscape\";\nimport cola from \"cytoscape-cola\";\nimport edgehandles from \"cytoscape-edgehandles\";\nimport FontFaceObserver from \"fontfaceobserver\";\nimport cxtmenu from \"cytoscape-cxtmenu\";\nimport Swal from \"sweetalert2\";\nimport defaultHash from \"./utils/defaultHash\";\nimport * as styleVariables from \"./variables.scss\";\nimport {\n  cyto2tgf,\n  tgf2cyto,\n  urlSafeBase64Encode,\n  urlSafeBase64Decode\n} from \"./utils/io\";\nimport { GraphDisplayState } from \"./GraphControls\";\nimport nodeHtmlLabel from \"cytoscape-node-html-label\";\n\ncytoscape.use(cola);\ncytoscape.use(edgehandles);\ncytoscape.use(cxtmenu);\nnodeHtmlLabel(cytoscape);\n\nconst graphToHash = (cy: cytoscape.Core) =>\n  `#${encodeURIComponent(urlSafeBase64Encode(cyto2tgf(cy)))}`;\n\nconst hashToGraph = (hash: string) => {\n  if (!hash.startsWith(\"#\")) throw new Error(\"invalid hash\");\n  return tgf2cyto(urlSafeBase64Decode(decodeURIComponent(hash.substr(1))));\n};\n\nconst getNewNodeLabel = () =>\n  String.fromCharCode(\n    \"a\".charCodeAt(0) + Math.random() * (\"z\".charCodeAt(0) - \"a\".charCodeAt(0))\n  );\n\ninterface GraphVisualizationProps {\n  visualizationRef?: (visualizationRef: GraphVisualization) => void;\n  disableInteraction: boolean;\n  autoLayout: boolean;\n  graphDisplayState: GraphDisplayState;\n  onChange?: () => void;\n}\n\ninterface GraphVisualizationState {\n  interactionDisabled: boolean;\n  layoutRunning: boolean;\n}\n\nclass GraphVisualization extends React.Component<\n  GraphVisualizationProps,\n  GraphVisualizationState\n  > {\n  container: HTMLDivElement | null = null;\n  cy: cytoscape.Core | null = null;\n  layout: cytoscape.Layouts | null = null;\n  edgehandles: any = null;\n  menus: { [key: string]: any } = {};\n  readyPromise: Promise<void>;\n\n  constructor(props: GraphVisualizationProps) {\n    super(props);\n    this.state = GraphVisualization.getDerivedStateFromProps(props, {});\n    this.readyPromise = new FontFaceObserver(\"KaTeX_Math\").load();\n  }\n\n  getEdgeLabel = (edge: EdgeSingular) => {\n    if (\n      typeof edge.data(\"flow\") !== \"number\" ||\n      typeof edge.data(\"capacity\") !== \"number\"\n    ) {\n      return \"\";\n    }\n    const { graphDisplayState } = this.props;\n    if (graphDisplayState === \"flow\") {\n      return `${edge.data(\"flow\")}/${edge.data(\"capacity\")}`;\n    } else if (graphDisplayState === \"residual\") {\n      return `${edge.data(\"capacity\") - edge.data(\"flow\")}`;\n    } else if (graphDisplayState === \"original_flow\") {\n      return `${0}/${edge.data(\"capacity\")}`;\n    }\n    return \"\";\n  };\n\n  getEdgeCurveStyle = (edge: EdgeSingular) => {\n    return edge\n      .parallelEdges()\n      .difference(edge.codirectedEdges())\n      .filter(\n        otherEdge =>\n          this.getEdgeVisibility(otherEdge as EdgeSingular) === \"visible\"\n      ).length > 0\n      ? \"bezier\"\n      : \"straight\";\n  };\n\n  getEdgeVisibility = (edge: EdgeSingular) => {\n    if (\n      typeof edge.data(\"flow\") !== \"number\" ||\n      typeof edge.data(\"capacity\") !== \"number\"\n    ) {\n      return \"hidden\";\n    }\n    const { graphDisplayState } = this.props;\n    const { interactionDisabled } = this.state;\n    if (graphDisplayState === \"flow\") {\n      return interactionDisabled &&\n        edge.data(\"capacity\") === 0 &&\n        edge.data(\"flow\") === 0\n        ? \"hidden\"\n        : \"visible\";\n    } else if (graphDisplayState === \"residual\") {\n      return edge.data(\"capacity\") - edge.data(\"flow\") === 0\n        ? \"hidden\"\n        : \"visible\";\n    } else if (graphDisplayState === \"original_flow\") {\n      return \"visible\";\n    }\n    return \"visible\";\n  };\n\n  getHighlightColor = () => {\n    if (this.props.graphDisplayState === \"original_flow\") {\n      return styleVariables.colorBlack;\n    } else {\n      return styleVariables.colorHighlight;\n    }\n  };\n\n  restyle = () => {\n    if (!this.cy) return;\n    // @ts-ignore\n    this.cy.style(this.getStyle());\n  };\n\n  getStyle = () => [\n    {\n      selector: \".graph-node\",\n      style: {\n        width: styleVariables.nodeSize,\n        height: styleVariables.nodeSize,\n        \"text-valign\": \"center\",\n        \"text-halign\": \"center\",\n        \"font-family\": \"KaTeX_Math\",\n        \"border-width\": 3,\n        \"border-color\": styleVariables.colorBlack,\n        \"border-style\": (node: NodeSingular) =>\n          node.data().type === \"source\"\n            ? \"double\"\n            : node.data().type === \"sink\"\n              ? \"dashed\"\n              : \"solid\",\n        \"background-color\": \"white\",\n        \"transition-property\": \"border-color\",\n        \"transition-duration\": styleVariables.stepTransitionDuration,\n        \"transition-timing-function\": \"ease\"\n      }\n    },\n    {\n      selector: \".graph-node.highlighted\",\n      style: {\n        \"border-color\": () => this.getHighlightColor()\n      }\n    },\n    {\n      selector: \".graph-edge\",\n      style: {\n        \"target-arrow-shape\": \"triangle\",\n        color: styleVariables.colorBlack,\n        \"line-color\": styleVariables.colorBlack,\n        \"target-arrow-color\": styleVariables.colorBlack,\n        \"text-background-color\": \"white\",\n        \"text-background-opacity\": 1,\n        \"text-background-shape\": \"roundrectangle\",\n        \"font-family\": \"KaTeX_Math\",\n        \"font-size\": 12,\n        label: (edge: EdgeSingular | NodeSingular) =>\n          this.getEdgeLabel(edge as EdgeSingular),\n        \"curve-style\": (edge: EdgeSingular | NodeSingular) =>\n          this.getEdgeCurveStyle(edge as EdgeSingular),\n        visibility: (edge: EdgeSingular | NodeSingular) =>\n          this.getEdgeVisibility(edge as EdgeSingular) as \"none\" | \"visible\",\n        \"transition-property\": \"line-color, target-arrow-color\",\n        \"transition-duration\": styleVariables.stepTransitionDuration,\n        \"transition-timing-function\": \"ease\"\n      }\n    },\n    {\n      selector: \".graph-edge.highlighted\",\n      style: {\n        \"line-color\": () => this.getHighlightColor(),\n        \"target-arrow-color\": () => this.getHighlightColor()\n      }\n    },\n    {\n      selector: \".eh-handle\",\n      style: {\n        \"background-color\": styleVariables.colorHandles,\n        width: 12,\n        height: 12,\n        shape: \"ellipse\",\n        \"overlay-opacity\": 0,\n        \"border-width\": 12,\n        \"border-opacity\": 0\n      }\n    },\n    {\n      selector: \".eh-hover\",\n      style: {\n        \"background-color\": styleVariables.colorHandles\n      }\n    },\n    {\n      selector: \".eh-source\",\n      style: {\n        \"border-color\": styleVariables.colorHandles\n      }\n    },\n    {\n      selector: \".eh-target\",\n      style: {\n        \"border-color\": styleVariables.colorHandles\n      }\n    },\n    {\n      selector: \".eh-preview, .eh-ghost-edge\",\n      style: {\n        \"background-color\": styleVariables.colorHandles,\n        \"line-color\": styleVariables.colorHandles,\n        \"target-arrow-color\": styleVariables.colorHandles,\n        \"source-arrow-color\": styleVariables.colorHandles\n      }\n    },\n    {\n      selector: \".eh-ghost-edge.eh-preview-active\",\n      style: {\n        opacity: 0\n      }\n    }\n  ];\n\n  reset = () => {\n    if (!this.container) return;\n    if (this.cy) {\n      this.cy.destroy();\n    }\n    this.container.innerHTML = \"\";\n\n    let elementsFromUrl = hashToGraph(defaultHash);\n    if (window.location.hash) {\n      try {\n        elementsFromUrl = hashToGraph(window.location.hash);\n      } catch (err) {\n        Swal.fire(\n          \"Error\",\n          \"Unable to read graph from URL. The default graph was loaded.\",\n          \"error\"\n        );\n      }\n    }\n\n    // @ts-ignore\n    this.cy = cytoscape({\n      elements: elementsFromUrl,\n      container: this.container,\n      boxSelectionEnabled: false,\n      minZoom: 0.5,\n      maxZoom: 5,\n      wheelSensitivity: 0.1,\n      // @ts-ignore\n      style: this.getStyle()\n    });\n\n    // @ts-ignore\n    this.cy.nodeHtmlLabel([\n      {\n        query: \".graph-node\",\n        fontFamily: \"KaTeX_Math\",\n        tpl: (data: any) => {\n          const hasMetadata =\n            typeof data.height === \"number\" || typeof data.excess === \"number\";\n\n          return `\n          <div style=\"\n            font-family: KaTeX_Math;\n            text-align: center;\n            line-height: 12px;\n          \" class=\"cytoscape-html-node-label-${data.id}\">\n          <div style=\"font-size: ${hasMetadata ? 12 : 16}px;\">${\n            data.label\n            }</div>\n          ${\n            typeof data.height === \"number\"\n              ? `<div style=\"font-size: 10px;\">h=${data.height}</div>`\n              : \"\"\n            }\n          ${\n            typeof data.excess === \"number\"\n              ? `<div  style=\"font-size: 10px;\">e=${data.excess}</div>`\n              : \"\"\n            }\n          </div>\n        `;\n        }\n      }\n    ]);\n\n    this.cy!.on(\"add remove data\", \".graph-node, .graph-edge\", () => {\n      // @ts-ignore\n      this.restyle();\n\n      if (!this.cy || this.state.interactionDisabled) return;\n\n      if (this.props.onChange) this.props.onChange();\n\n      const exp = graphToHash(this.cy);\n      // @ts-ignore\n      if (window.history.pushState) {\n        window.history.replaceState(null, document.title, exp);\n      } else {\n        window.location.hash = exp;\n      }\n    });\n\n    // TODO: find out why this is necessary and remove\n    this.cy!.on(\"remove\", \".graph-node\", evt => {\n      const id = evt.target.id();\n      setTimeout(() => {\n        Array.from(\n          document.querySelectorAll(`.cytoscape-html-node-label-${id}`)\n        ).forEach(el => {\n          el.remove();\n        });\n      }, 100);\n    });\n\n    this.cy!.on(\"restyle\", () => {\n      this.restyle();\n    });\n\n    this.resetLayout();\n    if (!this.state.interactionDisabled) this.enableMenus();\n\n    // @ts-ignore\n    this.edgehandles = this.cy.edgehandles({\n      preview: false,\n      handleNodes: \".graph-node\",\n      hideHandleOnSourceNodeMove: false,\n      edgeParams: () => ({\n        data: {\n          flow: 0,\n          capacity: 0\n        },\n        classes: \"graph-edge\"\n      }),\n      edgeType: (sourceNode: NodeSingular, targetNode: NodeSingular) =>\n        sourceNode.outgoers().intersection(targetNode).length > 0\n          ? null\n          : \"flat\",\n      complete: (\n        sourceNode: NodeSingular,\n        targetNode: NodeSingular,\n        addedEles: EdgeCollection\n      ) => {\n        addedEles\n          .filter((element: any) => element.hasClass(\"graph-edge\"))\n          .forEach((edge: any) => {\n            if (\n              this.cy!.edges(\".graph-edges\").filter(\n                otherEdge =>\n                  otherEdge.data(\"source\") === edge.data(\"target\") &&\n                  otherEdge.data(\"target\") === edge.data(\"source\")\n              ).length === 0\n            ) {\n              this.cy!.add({\n                data: {\n                  source: edge.data(\"target\"),\n                  target: edge.data(\"source\"),\n                  flow: 0,\n                  capacity: 1\n                },\n                group: \"edges\",\n                classes: \"graph-edge\"\n              });\n            }\n          });\n        this.restyle();\n        this.resetLayout();\n      }\n    });\n\n    if (this.props.visualizationRef) this.props.visualizationRef(this);\n  };\n\n  enableMenus = () => {\n    // @ts-ignore\n    this.menus.nodeMenu = this.cy.cxtmenu({\n      menuRadius: 2 * styleVariables.nodeSize,\n      selector: \".graph-node\",\n      commands: [\n        {\n          content: \"Remove\",\n          select: (node: cytoscape.NodeSingular) => node.remove()\n        },\n        {\n          content: \"Rename\",\n          select: async (node: cytoscape.NodeSingular) => {\n            const { value } = await Swal.fire({\n              input: \"text\",\n              inputValue: node.data(\"label\"),\n              title: \"Rename\",\n              showCancelButton: true\n            });\n            if (value) node.data(\"label\", value);\n          }\n        },\n        {\n          content: \"Change Type\",\n          select: async (node: cytoscape.NodeSingular) => {\n            const { value } = await Swal.fire({\n              title: \"Change Type\",\n              input: \"select\",\n              inputOptions: {\n                default: \"Default\",\n                source: \"Source\",\n                sink: \"Sink\"\n              },\n              inputValue: node.data(\"type\"),\n              showCancelButton: true\n            });\n            if (value) node.data(\"type\", value);\n          }\n        }\n      ]\n    });\n\n    // @ts-ignore\n    this.menus.edgeMenu = this.cy.cxtmenu({\n      menuRadius: 2 * styleVariables.nodeSize,\n      selector: \".graph-edge\",\n      commands: [\n        {\n          content: \"Remove\",\n          select: (edge: cytoscape.EdgeSingular) => {\n            edge.parallelEdges().remove();\n          }\n        },\n        {\n          content: \"Reverse\",\n          select: (edge: cytoscape.EdgeSingular) => {\n            const reverseEdge = edge\n              .parallelEdges()\n              .difference(edge.codirectedEdges())[0] as EdgeSingular;\n            const edgeCapacity = edge.data(\"capacity\");\n            edge.data(\"capacity\", reverseEdge.data(\"capacity\"));\n            reverseEdge.data(\"capacity\", edgeCapacity);\n          }\n        },\n        {\n          content: \"Change Capacity\",\n          select: async (edge: cytoscape.EdgeSingular) => {\n            let { value } = await Swal.fire({\n              input: \"number\",\n              inputValue: edge.data(\"capacity\"),\n              title: \"Change Capacity\",\n              showCancelButton: true\n            });\n            const capacity = parseInt(value as string, 10);\n            if (!isNaN(capacity)) edge.data(\"capacity\", capacity);\n          }\n        }\n      ]\n    });\n\n    // @ts-ignore\n    this.menus.coreMenu = this.cy.cxtmenu({\n      menuRadius: 2 * styleVariables.nodeSize,\n      selector: \"core\",\n      commands: [\n        {\n          content: \"Add Node\",\n          select: (target: cytoscape.Core, evt: cytoscape.EventObject) => {\n            if (\n              !this.cy ||\n              target !== this.cy ||\n              this.state.interactionDisabled\n            )\n              return; // only handle taps on background\n            this.cy.add([\n              {\n                group: \"nodes\",\n                data: { label: getNewNodeLabel(), type: \"default\" },\n                classes: \"graph-node\",\n                renderedPosition: {\n                  x: evt.renderedPosition.x,\n                  y: evt.renderedPosition.y\n                }\n              }\n            ]);\n          }\n        }\n      ]\n    });\n  };\n\n  disableMenus = () => {\n    Object.values(this.menus).forEach(menu => menu.destroy());\n  };\n\n  resetLayout = () => {\n    if (!this.cy) return;\n    if (this.layout) {\n      this.layout.stop();\n    }\n    this.layout = this.cy.layout({\n      name: \"cola\",\n      // @ts-ignore\n      edgeLength: 3 * styleVariables.nodeSize,\n      randomize: false,\n      infinite: true,\n      fit: false,\n      handleDisconnected: false\n    });\n    if (this.state.layoutRunning) {\n      this.layout.run();\n    }\n  };\n\n  componentDidUpdate = (\n    prevProps: Partial<GraphVisualizationProps>,\n    prevState: Partial<GraphVisualizationState>\n  ) => {\n    if (\n      prevState.interactionDisabled !== this.state.interactionDisabled &&\n      this.cy\n    ) {\n      if (this.state.interactionDisabled) {\n        this.disableMenus();\n        this.edgehandles.hide();\n        this.edgehandles.disable();\n      } else {\n        this.enableMenus();\n        this.edgehandles.enable();\n      }\n      this.restyle();\n    }\n    if (prevProps.graphDisplayState !== this.props.graphDisplayState) {\n      this.restyle();\n    }\n    if (prevState.layoutRunning !== this.state.layoutRunning && this.layout) {\n      if (this.state.layoutRunning) {\n        this.layout.run();\n      } else {\n        this.layout.stop();\n      }\n    }\n  };\n\n  static getDerivedStateFromProps(\n    props: GraphVisualizationProps,\n    state: Partial<GraphVisualizationState>\n  ): GraphVisualizationState {\n    return {\n      ...state,\n      layoutRunning: props.autoLayout,\n      interactionDisabled:\n        props.disableInteraction || props.graphDisplayState === \"original_flow\"\n    };\n  }\n\n  render = () => {\n    return (\n      <div className=\"graph-visualization\">\n        <div className=\"graph-visualization__overlay\" />\n        <div\n          className=\"graph-visualization__cytoscape\"\n          ref={ref => {\n            this.readyPromise.then(() => {\n              if (!this.container) {\n                this.container = ref;\n                this.reset();\n              }\n            });\n          }}\n        />\n      </div>\n    );\n  };\n}\n\nexport default GraphVisualization;\n","// the (base64-encoded) TGF string of the default graph\nconst defaultHash = \"#cyBzb3VyY2UKYQpiCmMKZAplCnQgc2luawpzIGEgMwpzIGMgMwphIGIgNApiIHMgMwpiIGMgMQpiIGQgMgpjIGQgMgpjIGUgNgpkIGEgMQpkIHQgMQplIHQgOQ\";\nexport default defaultHash;\n","import { useState } from \"react\";\n\n/**\n * A simple react queue hook\n *\n * @param initialQueue the initial queue contents (if any)\n * @param capacity an optional capacity. elements added after\n *     the queue is full will push old elements out\n */\nfunction useQueue<T>(\n  initialQueue?: T[],\n  capacity?: number\n): {\n  queue: T[]; // the queue's contents\n  enqueue: (obj: T) => void; // enqueues an object\n  reset: (objs: T[]) => void; // replaces the queue's contents\n} {\n  const [queue, setQueue] = useState<T[]>(initialQueue || []);\n\n  return {\n    queue,\n    enqueue: obj => {\n      setQueue([\n        obj,\n        ...queue.slice(0, (capacity ? capacity : queue.length) - 1)\n      ]);\n    },\n    reset: objs => {\n      setQueue(objs);\n    }\n  };\n}\n\nexport default useQueue;\n","import React from \"react\";\n\nconst Footer = ({ onTourPressed }: { onTourPressed: () => void }) => (\n  <div className=\"footer\">\n    <span\n      role=\"button\"\n      onClick={evt => {\n        evt.preventDefault();\n        onTourPressed();\n      }}\n    >\n      Take a Tour\n    </span>\n    {\" | \"}\n    <a href=\"https://github.com/timmh/maxflow\">Code</a>\n    {\" | \"}\n    <a href=\"https://github.com/timmh/maxflow/issues\">Feedback</a>\n    {\" | \"}\n    <a href=\"/docs\">Docs</a>\n  </div>\n);\n\nexport default Footer;\n","import React from \"react\";\n\n/**\n * Provides a listing of references for the selected algorithm\n *\n * @param props component props\n * @param props.references the references to be shown\n */\nconst References = ({\n  references\n}: {\n  references: { label: string; url: string }[];\n}) => {\n  return (\n    <div className=\"references\">\n      <h2>Sources & Further Reading</h2>\n      <ul className=\"references__list\">\n        {references.map(({ label, url }) => (\n          <li key={`${label}-${url}`} className=\"references__item\">\n            <a href={url}>{label}</a>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default References;\n","import React, { useEffect, useState, useCallback } from \"react\";\nimport \"./App.scss\";\nimport Pseudocode from \"./Pseudocode\";\nimport NodeQueueStackVisualization from \"./NodeQueueStackVisualization\";\nimport Controls from \"./Controls\";\nimport useInterval from \"./utils/useInterval\";\nimport { useDropzone } from \"react-dropzone\";\nimport Swal from \"sweetalert2\";\nimport { tgf2cyto, cyto2tgf } from \"./utils/io\";\nimport assertValidGraph from \"./utils/assertValidGraph\";\nimport GraphControls, { GraphDisplayState } from \"./GraphControls\";\nimport FileSaver from \"file-saver\";\nimport { Graph } from \"./CytoscapeGraph\";\nimport GraphVisualization from \"./GraphVisualization\";\nimport * as styleVariables from \"./variables.scss\";\nimport useQueue from \"./utils/useQueue\";\nimport algorithms from \"./algorithms\";\nimport Footer from \"./Footer\";\nimport * as Joyride from \"react-joyride\";\nimport JoyrideComponent from \"react-joyride\";\nimport { useMediaQuery } from \"react-responsive\";\nimport classNames from \"classnames\";\nimport domtoimage from \"dom-to-image\";\nimport Switch from \"./Switch\";\nimport References from \"./References\";\nimport Header from \"./Header\";\nimport {\n  Algorithm,\n  AlgorithmStepResult,\n  AlgorithmPseudocodeArgs\n} from \"./algorithm\";\n\n// the \"empty\" step result, shown before the algorithm is run\nconst initialStepResult = {\n  highlightedLines: [],\n  linearNodes: [],\n  graphMutations: []\n};\n\n// code for loading and persisting preferences in localStorage\nconst preferencesKey = \"maxflow_preferences\";\nconst preferences = {\n  algorithmName: algorithms[0].filename,\n  autoLayout: true,\n  graphDisplayState: \"flow\" as GraphDisplayState\n};\ntry {\n  Object.assign(preferences, JSON.parse(localStorage.getItem(preferencesKey)!));\n} catch (err) {\n  localStorage.removeItem(preferencesKey);\n}\nconst setPreferences = (preferences: Object) => {\n  localStorage.setItem(preferencesKey, JSON.stringify(preferences));\n};\n\n/**\n * The App component is responsible for maintaining the\n * high-level state of the application\n */\nconst App: React.FC = () => {\n  const [visRef, setVisRef] = useState<GraphVisualization | null>(null);\n  const [algorithmName, setAlgorithmName] = useState(preferences.algorithmName);\n  const [algorithm, setAlgorithm] = useState<Algorithm | null>(null);\n  useEffect(() => {\n    import(`./algorithms/${algorithmName}.ts`).then(mod =>\n      setAlgorithm(mod.default)\n    );\n  }, [algorithmName, setAlgorithm]);\n  const [\n    algorithmImplementationInstance,\n    setAlgorithmImplementationInstance\n  ] = useState<IterableIterator<AlgorithmStepResult> | null>(null);\n  const resetAlgorithm = () => {\n    if (algorithm && visRef && visRef.cy) {\n      setAlgorithmImplementationInstance(\n        algorithm.implementation(new Graph(visRef.cy))\n      );\n    }\n  };\n  useEffect(resetAlgorithm, [algorithm, visRef]);\n  const [algorithmState, setAlgorithmState] = useState<\n    \"stopped\" | \"auto\" | \"manual\" | \"finished\"\n  >(\"stopped\");\n  const [autoLayout, setAutoLayout] = useState(preferences.autoLayout);\n  const [graphDisplayState, setGraphDisplayState] = useState<GraphDisplayState>(\n    preferences.graphDisplayState\n  );\n\n  const {\n    queue: highlightedLines,\n    enqueue: enqueueHighlightedLines,\n    reset: resetHighlightedLines\n  } = useQueue<number[]>(\n    initialStepResult.highlightedLines,\n    styleVariables.highlightedLinesCount\n  );\n\n  const [stepBackwardBuffer, setStepBackwardBuffer] = useState<\n    AlgorithmStepResult[]\n  >([initialStepResult]);\n  const [stepBackwardBufferIndex, setStepBackwardBufferIndex] = useState(0);\n  const { linearNodes } = stepBackwardBuffer[stepBackwardBufferIndex];\n  const [algorithmPseudocodeArgs, setAlgorithmPseudocodeArgs] = useState<\n    AlgorithmPseudocodeArgs\n  >({ sourceName: \"s\", sinkName: \"t\" });\n\n  const [showTour, setShowTour] = useState(false);\n\n  const isBigScreen = useMediaQuery({\n    query: `(min-width: ${styleVariables.minWidthBigScreen})`\n  });\n  const [activeView, setActiveView] = useState<\"graph\" | \"algorithm\">(\"graph\");\n\n  const stepForward = () => {\n    if (!algorithmImplementationInstance || !visRef) return;\n    try {\n      assertValidGraph(visRef.cy!);\n    } catch (err) {\n      Swal.fire(\"Error\", err.toString(), \"error\");\n      return;\n    }\n\n    let result: AlgorithmStepResult;\n    if (stepBackwardBufferIndex >= stepBackwardBuffer.length - 1) {\n      const yieldResult = algorithmImplementationInstance.next();\n      result = yieldResult.value;\n      setStepBackwardBuffer([...stepBackwardBuffer, yieldResult.value]);\n      setStepBackwardBufferIndex(stepBackwardBufferIndex + 1);\n    } else {\n      result = stepBackwardBuffer[stepBackwardBufferIndex + 1];\n      setStepBackwardBufferIndex(stepBackwardBufferIndex + 1);\n    }\n    if (result) {\n      const { highlightedLines = [], graphMutations = [], done } = result;\n      if (done) {\n        setAlgorithmState(\"finished\");\n      }\n      enqueueHighlightedLines(highlightedLines);\n      visRef.cy!.batch(() => {\n        graphMutations.forEach(graphMutation => graphMutation.apply());\n      });\n    }\n  };\n\n  const stepBackward = () => {\n    if (!algorithmImplementationInstance || !visRef) return;\n    if (stepBackwardBufferIndex === -1) return;\n    const currentResult = stepBackwardBuffer[stepBackwardBufferIndex];\n    const result = stepBackwardBuffer[stepBackwardBufferIndex - 1];\n    setStepBackwardBufferIndex(stepBackwardBufferIndex - 1);\n    visRef.cy!.batch(() => {\n      (currentResult.graphMutations || [])\n        .slice()\n        .reverse()\n        .forEach(graphMutation => graphMutation.inverse().apply());\n    });\n    const { highlightedLines = [] } = result;\n    resetHighlightedLines([highlightedLines]);\n  };\n\n  const reset = () => {\n    if (!visRef || !visRef.cy) return;\n    visRef.cy.batch(() => {\n      stepBackwardBuffer\n        .slice()\n        .reverse()\n        .forEach(result => {\n          (result.graphMutations || [])\n            .slice()\n            .reverse()\n            .forEach(graphMutation => graphMutation.inverse().apply());\n        });\n      visRef.cy!.$(\".graph-node\").removeData(\"height excess\");\n    });\n    setAlgorithmState(\"stopped\");\n    resetHighlightedLines([]);\n    setStepBackwardBuffer([initialStepResult]);\n    setStepBackwardBufferIndex(0);\n    resetAlgorithm();\n  };\n\n  useInterval(\n    () => {\n      if (algorithmState === \"auto\") {\n        stepForward();\n      }\n    },\n    styleVariables.autoStepInterval,\n    [algorithmImplementationInstance, algorithmState, setAlgorithmState]\n  );\n\n  const handleVisChange = useCallback(() => {\n    if (!visRef || !visRef.cy) return;\n\n    setAlgorithmPseudocodeArgs({\n      sourceName:\n        visRef?.cy?.nodes('.graph-node[type=\"source\"]')[0]?.data(\"label\") ??\n        \"s\",\n      sinkName:\n        visRef?.cy?.nodes('.graph-node[type=\"sink\"]')[0]?.data(\"label\") ?? \"t\"\n    });\n  }, [visRef]);\n\n  useEffect(() => {\n    handleVisChange();\n  }, [handleVisChange]);\n\n  const handleTourCallback = useCallback((data: Joyride.CallBackProps) => {\n    if (\n      data.status === Joyride.STATUS.FINISHED ||\n      data.status === Joyride.STATUS.SKIPPED\n    ) {\n      setShowTour(false);\n    }\n  }, []);\n\n  const onDrop = useCallback(\n    (acceptedFiles: Blob[]) => {\n      if (acceptedFiles.length !== 1) {\n        Swal.fire(\"Error\", \"Can only import a single graph at a time\", \"error\");\n        return;\n      }\n\n      if (algorithmState !== \"stopped\") {\n        Swal.fire(\n          \"Error\",\n          \"Can only import a graph if visualization is stopped\",\n          \"error\"\n        );\n        return;\n      }\n\n      const reader = new FileReader();\n      reader.onabort = () =>\n        Swal.fire(\"Error\", \"File reading was aborted\", \"error\");\n      reader.onerror = () =>\n        Swal.fire(\"Error\", \"File reading has failed\", \"error\");\n      reader.onload = () => {\n        if (typeof reader.result !== \"string\") {\n          Swal.fire(\"Error\", \"File reading has failed\", \"error\");\n        } else {\n          try {\n            const elements = tgf2cyto(reader.result);\n            visRef!.cy!.json({ elements });\n            visRef!.resetLayout();\n          } catch (err) {\n            Swal.fire(\"Error\", `Parsing error: ${err.toString()}`, \"error\");\n          }\n        }\n      };\n      reader.readAsText(acceptedFiles[0]);\n    },\n    [algorithmState, visRef]\n  );\n  const { getRootProps, getInputProps, open: openDropzone } = useDropzone({\n    onDrop,\n    noClick: true\n  });\n\n  if (algorithm === null) return null;\n\n  return (\n    <div className=\"app\" {...getRootProps()}>\n      <input {...getInputProps()} />\n      {!isBigScreen && (\n        <div className=\"view-switch\">\n          <Header />\n          <Switch\n            onChoose={activeView => setActiveView(activeView)}\n            activeChoice={activeView}\n            choices={[\n              { value: \"graph\", label: \"Network\" },\n              { value: \"algorithm\", label: \"Algorithm\" }\n            ]}\n          />\n        </div>\n      )}\n      <div className=\"app__content-wrapper\">\n        <div className=\"app__content\">\n          <div\n            className={classNames(\"app__left\", {\n              \"app__left--hidden\": !isBigScreen && activeView !== \"graph\"\n            })}\n          >\n            <GraphControls\n              autoLayout={autoLayout}\n              setAutoLayout={autoLayout => {\n                setAutoLayout(autoLayout);\n                setPreferences({ ...preferences, autoLayout });\n              }}\n              onImport={() => openDropzone()}\n              onExport={() =>\n                visRef &&\n                FileSaver.saveAs(\n                  new Blob([cyto2tgf(visRef.cy!)], {\n                    type: \"text/plain;charset=utf-8\"\n                  }),\n                  \"graph.tgf\",\n                  { autoBom: true }\n                )\n              }\n              onExportPng={() => {\n                (async () => {\n                  try {\n                    if (!visRef) return;\n                    const el = document.querySelector(\n                      \".graph-visualization__cytoscape\"\n                    );\n                    if (!el) throw new Error(\"Unable to export node labels\");\n                    visRef.edgehandles.hide();\n                    const nodeLabelBlob = await domtoimage.toBlob(el);\n                    FileSaver.saveAs(nodeLabelBlob, \"graph.png\");\n                  } catch (err) {\n                    Swal.fire(\"Error\", \"The image export failed\", \"error\");\n                  }\n                })();\n              }}\n              graphDisplayState={graphDisplayState}\n              setGraphDisplayState={(graphDisplayState: GraphDisplayState) => {\n                setGraphDisplayState(graphDisplayState);\n                setPreferences({ ...preferences, graphDisplayState });\n              }}\n            />\n            <GraphVisualization\n              visualizationRef={nextVisualizationRef => {\n                setVisRef(nextVisualizationRef);\n              }}\n              onChange={() => handleVisChange()}\n              disableInteraction={algorithmState !== \"stopped\"}\n              autoLayout={autoLayout}\n              graphDisplayState={graphDisplayState}\n            />\n          </div>\n          <div\n            className={classNames(\"app__right\", {\n              \"app__right--hidden\": !isBigScreen && activeView !== \"algorithm\"\n            })}\n          >\n            <div className=\"app__right__header\" />\n            <Controls\n              state={algorithmState}\n              setState={setAlgorithmState}\n              stepBackward={\n                stepBackwardBufferIndex > -1 ? stepBackward : undefined\n              }\n              stepForward={\n                algorithmState !== \"finished\" ? stepForward : undefined\n              }\n              reset={reset}\n              algorithms={algorithms.map(({ label, filename }) => ({\n                label,\n                value: filename\n              }))}\n              currentAlgorithm={algorithmName}\n              setCurrentAlgorithm={algorithmName => {\n                setAlgorithmName(algorithmName);\n                setPreferences({ ...preferences, algorithmName });\n              }}\n            />\n            <div className=\"app__right__contents\">\n              <Pseudocode\n                algorithm={algorithm}\n                highlightedLines={highlightedLines}\n                algorithmPseudocodeArgs={algorithmPseudocodeArgs}\n              />\n              {algorithm.linearDataStructure !== \"none\" ? (\n                <NodeQueueStackVisualization\n                  nodes={linearNodes}\n                  mode={algorithm.linearDataStructure}\n                />\n              ) : (\n                <div className=\"horizontal-divider\" />\n              )}\n              <References references={algorithm.references} />\n            </div>\n            <Footer\n              onTourPressed={() => {\n                setShowTour(true);\n              }}\n            />\n          </div>\n        </div>\n      </div>\n      <JoyrideComponent\n        continuous\n        run={showTour}\n        callback={handleTourCallback}\n        scrollToFirstStep\n        showProgress\n        showSkipButton\n        steps={tourSteps}\n      />\n    </div>\n  );\n};\n\nconst tourSteps = [\n  {\n    target: \".graph-visualization__overlay\",\n    content: `\n      This is the flow network view.\n      Click/tap and hold to modify nodes and edges.\n      When hovering a node, drag the red handle to create new edges.\n    `\n  },\n  {\n    target: \".controls__select\",\n    content: `\n      Select an algorithm you wish to visualize\n    `\n  },\n  {\n    target: \".controls__buttons\",\n    content: `\n      Use these buttons to step forwards or backwards,\n      run to completion or reset the algorithm\n    `\n  },\n  {\n    target: \".pseudocode\",\n    content: `\n      This is the pseudocode of your algorithm\n    `\n  },\n  {\n    target: \".node-queue-stack-visualization\",\n    content: `\n      Depending on the selected algorithm, secondary data structures\n      are visualized here\n    `\n  },\n  {\n    target: \".graph-controls\",\n    content: `\n      Use these controls to disable automatic flow network layouting,\n      import and export your flow network and switch between\n      different flow network presentation options\n    `\n  }\n].map(step => ({ disableBeacon: true, ...step }));\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}