{"version":3,"file":"static/js/769.b9fb1f6c.chunk.js","mappings":"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","sources":["algorithms/Edmonds-Karp.ts","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js"],"sourcesContent":["import {\n  Graph,\n  GraphMutation,\n  Node,\n  Edge,\n  GraphEdgeFlowMutation,\n  GraphNodeHighlightMutation,\n  GraphEdgeHighlightMutation\n} from \"../CytoscapeGraph\";\nimport { Algorithm } from \"../algorithm\";\n\n/** The Edmonds-Karp algorithm */\nconst EdmondsKarp: Algorithm = {\n  name: \"Edmonds-Karp\",\n  linearDataStructure: \"queue\",\n  pseudocode: ({ sourceName, sinkName }) => String.raw`\n    \\begin{algorithm}\n    \\begin{algorithmic}\n    \\PROCEDURE{Edmonds-Karp}{$G=(V,\\ E),\\ ${sourceName} \\in V,\\ ${sinkName} \\in V$}\n        \\STATE $f = 0$\n        \\REPEAT\n            \\STATE $p = \\left[\\ \\right]$\n            \\STATE $q = \\left[\\ ${sourceName}\\ \\right]$ \\COMMENT{create queue}\n            \\WHILE{$q_\\mathrm{length}$ > 0}\n                \\STATE $c =$ \\CALL{dequeue}{$q$}\n                \\FOR{edge $e$ originating from $c$}\n                    \\IF{$e_\\mathrm{target} \\notin p$ \\AND $e_\\mathrm{target} \\neq ${sourceName}$ \\AND $e_\\mathrm{capacity} > e_\\mathrm{flow}$}\n                        \\STATE $p[e_\\mathrm{target}] = e$\n                        \\STATE \\CALL{enqueue}{$q$, $e_\\mathrm{target}$}\n                    \\ENDIF\n                \\ENDFOR\n            \\ENDWHILE\n            \\IF{$p[${sinkName}] \\neq \\varnothing$}\n                \\STATE $\\Delta f = \\infty$\n                \\FOR{$e \\in p$}\n                    \\STATE $\\Delta f = $ \\CALL{min}{$\\Delta f$, $e_\\mathrm{capacity} - e_\\mathrm{flow}$}\n                \\ENDFOR\n                \\FOR{$e \\in p$}\n                    \\STATE $r = e_\\mathrm{reverse}$\n                    \\STATE $e_\\mathrm{flow} = e_\\mathrm{flow} + \\Delta f$\n                    \\STATE $r_\\mathrm{flow} = r_\\mathrm{flow} - \\Delta f$\n                \\ENDFOR\n                \\STATE $f = f + \\Delta f$\n            \\ENDIF\n        \\UNTIL{$p[${sinkName}] = \\varnothing$}\n        \\RETURN $f$\n    \\ENDPROCEDURE\n    \\end{algorithmic}\n    \\end{algorithm}\n  `,\n  references: [\n    {\n      label: `Edmonds-Karp Algorithm at Brilliant.org`,\n      url: \"https://brilliant.org/wiki/edmonds-karp-algorithm/\"\n    },\n    {\n      label: `Jack Edmonds, Richard M. Karp: Theoretical improvements in algorithmic efficiency for network flow problems (1972)`,\n      url:\n        \"https://web.eecs.umich.edu/~pettie/matching/Edmonds-Karp-network-flow.pdf\"\n    }\n  ],\n  labeledBlocks: [\n    { lines: [4, 14], color: \"#ffdcdc\", label: \"Breadth-first search\" },\n    {\n      lines: [15, 26],\n      color: \"#e3ffff\",\n      label: \"Increase flow along found path\"\n    }\n  ],\n  implementation: function*(\n    graph: Graph\n  ): IterableIterator<{\n    highlightedLines?: number[];\n    linearNodes: Node[];\n    graphMutations?: GraphMutation[];\n    done?: true;\n  }> {\n    const sourceNode = graph.getSourceNode();\n    const sinkNode = graph.getSinkNode();\n\n    let flow = 0;\n    let pred: { [key: string]: Edge };\n\n    yield {\n      highlightedLines: [4, 5],\n      linearNodes: []\n    };\n\n    do {\n      const q = [sourceNode];\n      pred = {};\n\n      const mutationsToUndoAfterSearch = [];\n\n      while (q.length > 0 && !pred[sinkNode.getId()]) {\n        yield {\n          highlightedLines: [7],\n          linearNodes: q,\n          graphMutations: []\n        };\n        const cur = q.shift()!;\n        yield {\n          highlightedLines: [8],\n          linearNodes: q,\n          graphMutations: [new GraphNodeHighlightMutation(cur)]\n        };\n        mutationsToUndoAfterSearch.push(\n          new GraphNodeHighlightMutation(cur).inverse()\n        );\n        for (let edge of cur.getOutgoingEdges()) {\n          yield {\n            highlightedLines: [9],\n            linearNodes: q,\n            graphMutations: [new GraphEdgeHighlightMutation(edge)]\n          };\n          mutationsToUndoAfterSearch.push(\n            new GraphEdgeHighlightMutation(edge).inverse()\n          );\n          if (\n            pred[edge.getTargetNode().getId()] === undefined &&\n            !edge.getTargetNode().isEqualTo(sourceNode) &&\n            edge.getCapacity() > edge.getFlow()\n          ) {\n            yield {\n              highlightedLines: [10, 11],\n              linearNodes: q,\n              graphMutations: [new GraphEdgeHighlightMutation(edge)]\n            };\n            mutationsToUndoAfterSearch.push(\n              new GraphEdgeHighlightMutation(edge).inverse()\n            );\n            pred[edge.getTargetNode().getId()] = edge;\n            q.push(edge.getTargetNode());\n          }\n          if (edge.getTargetNode().isEqualTo(sinkNode)) break;\n        }\n      }\n      yield {\n        highlightedLines: [15],\n        linearNodes: q,\n      };\n      if (pred[sinkNode.getId()] !== undefined) {\n        let currentHighlightEdge = pred[sinkNode.getId()];\n        const foundPathHighlightMutations: GraphMutation[] = [];\n        while (currentHighlightEdge) {\n          foundPathHighlightMutations.push(\n            new GraphEdgeHighlightMutation(currentHighlightEdge),\n            new GraphNodeHighlightMutation(\n              currentHighlightEdge.getSourceNode()\n            ),\n            new GraphNodeHighlightMutation(currentHighlightEdge.getTargetNode())\n          );\n          currentHighlightEdge =\n            pred[currentHighlightEdge.getSourceNode().getId()];\n        }\n        const mutationsToUndoAfterUpdate = foundPathHighlightMutations\n          .slice()\n          .reverse()\n          .map(mutation => mutation.inverse());\n\n        yield {\n          highlightedLines: [16],\n          linearNodes: q,\n          graphMutations: [\n            ...mutationsToUndoAfterSearch,\n            ...foundPathHighlightMutations\n          ]\n        };\n\n        let df = Infinity;\n        let currentEdge = pred[sinkNode.getId()];\n        let previousEdge = currentEdge;\n        while (currentEdge !== undefined) {\n          yield {\n            highlightedLines: [18],\n            linearNodes: q,\n            graphMutations: [new GraphEdgeHighlightMutation(previousEdge).inverse(), new GraphEdgeHighlightMutation(currentEdge)]\n          }\n          df = Math.min(df, currentEdge.getCapacity() - currentEdge.getFlow());\n          currentEdge = pred[currentEdge.getSourceNode().getId()];\n        }\n\n        currentEdge = pred[sinkNode.getId()];\n        while (currentEdge !== undefined) {\n          const reverseCurrentEdge = currentEdge.getReverseEdge();\n          yield {\n            highlightedLines: [22, 23],\n            linearNodes: q,\n            graphMutations: [\n              new GraphEdgeFlowMutation(currentEdge, df),\n              new GraphEdgeFlowMutation(reverseCurrentEdge, -df)\n            ]\n          };\n          currentEdge = pred[currentEdge.getSourceNode().getId()];\n        }\n        flow = flow + df;\n        yield {\n          highlightedLines: [25],\n          linearNodes: q,\n          graphMutations: mutationsToUndoAfterUpdate\n        };\n      }\n    } while (pred[sinkNode.getId()] !== undefined);\n    yield {\n      highlightedLines: [28],\n      linearNodes: [],\n      done: true\n    };\n    return flow;\n  }\n};\n\nexport default EdmondsKarp;\n","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}"],"names":["EdmondsKarp","name","linearDataStructure","pseudocode","sourceName","sinkName","String","raw","references","label","url","labeledBlocks","lines","color","implementation","graph","sourceNode","getSourceNode","sinkNode","getSinkNode","flow","highlightedLines","linearNodes","q","pred","mutationsToUndoAfterSearch","length","getId","graphMutations","cur","shift","GraphNodeHighlightMutation","push","inverse","getOutgoingEdges","edge","GraphEdgeHighlightMutation","undefined","getTargetNode","isEqualTo","getCapacity","getFlow","f","currentHighlightEdge","foundPathHighlightMutations","mutationsToUndoAfterUpdate","slice","reverse","map","mutation","df","Infinity","currentEdge","previousEdge","Math","min","reverseCurrentEdge","getReverseEdge","GraphEdgeFlowMutation","done","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","i","F","s","n","value","e","_e","TypeError","err","normalCompletion","didErr","call","step","next","_e2","_taggedTemplateLiteral","strings","Object","freeze","defineProperties"],"sourceRoot":""}